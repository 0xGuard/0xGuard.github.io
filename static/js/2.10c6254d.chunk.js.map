{"version":3,"sources":["hooks/useContract.ts","hooks/useWeb3.ts","hooks/useTokenBalance.ts","utils/callHelpers.ts","views/Home/components/CardValue.tsx","components/UnlockButton.tsx","components/TutorialBanner/index.tsx","views/Home/components/DIBStats.tsx","hooks/useFarmsWithBalance.ts","views/Home/components/CardBusdValue.tsx","views/Home/components/DIBHarvestBalance.tsx","views/Home/components/DIBWalletBalance.tsx","views/Home/components/FarmStakingCard.tsx","hooks/useLocalStorage.ts","hooks/useReferrer.ts","utils/referalUtils.ts"],"names":["useERC20","address","web3","useWeb3","useMemo","getBep20Contract","useDIB","getDIBContract","useMasterchef","getMasterchefContract","useSousChef","id","getSouschefContract","useGameFactory","getGameFactoryContract","library","useWeb3React","refEth","useRef","_useState","useState","Web3","web3NoAccount","_useState2","_slicedToArray","setweb3","useEffect","current","FetchStatus","useTotalSupply","slowRefresh","useRefresh","_useState3","_useState4","totalSupply","setTotalSupply","_fetchTotalSupply","_asyncToGenerator","_regeneratorRuntime","mark","_callee2","cakeContract","supply","wrap","_context2","prev","next","methods","call","sent","BigNumber","stop","apply","arguments","fetchTotalSupply","useDIBPerSecond","_useState5","BIG_ZERO","_useState6","dibPerSecond","setDibPerSecond","_fetchDibPerSecond","_callee3","masterChefContract","perSecond","_context3","lfgPerSecond","fetchDibPerSecond","useTokenBalance","tokenAddress","NOT_FETCHED","SUCCESS","FAILED","balance","fetchStatus","balanceState","setBalanceState","account","fastRefresh","fetchBalance","_ref","_callee","contract","res","_context","balanceOf","t0","console","error","_objectSpread","approve","lpContract","abrupt","options","ethers","constants","MaxUint256","send","from","_x","_x2","_x3","txHashCallback","tx","transactionHash","stake","_ref2","pid","amount","lockPeriod","proof","decimals","_args2","length","undefined","DEFAULT_TOKEN_DECIMAL","deposit","times","toString","on","_x4","_x5","_x6","_x7","_x8","_x9","sousStake","_ref3","sousChefContract","_args3","BIG_TEN","pow","_x10","_x11","sousStakeBnb","_ref4","_callee4","_context4","value","_x12","_x13","_x14","unstake","_ref5","_callee5","_args5","_context5","withdraw","_x15","_x16","_x17","_x18","sousUnstake","_ref6","_callee6","_context6","_x19","_x20","_x21","_x22","sousEmergencyUnstake","_ref7","_callee7","_context7","emergencyWithdraw","_x23","_x24","harvest","_ref8","_callee8","referrer","_context8","_x25","_x26","_x27","_x28","soushHarvest","_ref9","_callee9","_context9","_x29","_x30","soushHarvestBnb","_ref10","_callee10","_context10","_x31","_x32","chainId","parseInt","CHAIN_ID","dibWethFarm","farms","find","farm","Token","getDIBAddress","tokens","weth","getAddress","lpAddresses","CardValue","_ref$fontSize","fontSize","_ref$lineHeight","lineHeight","_ref$prefix","prefix","_ref$bold","bold","_ref$color","color","_decimals","_useCountUp","useCountUp","start","end","duration","separator","countUp","update","updateValue","_jsxs","Text","style","children","UnlockButton","props","t","useTranslation","_useAuth","useAuth","login","logout","onPresentConnectModal","useWalletModal","_jsx","Button","onClick","Hero","styled","div","_templateObject","_taggedTemplateLiteral","theme","mediaQueries","lg","HeroDescription","_templateObject2","StyledExternalLink","LinkExternal","_templateObject3","TutorialBanner","Heading","as","scale","mb","href","StyledDIBStats","Card","Row","DIBStats","tvlData","useTotalValue","tvl","toLocaleString","maximumFractionDigits","dibUsdcPrice","usePriceDIBUsdc","toNumber","getBalanceNumber","totalMinted","marketCap","CardBody","textAlign","concat","Skeleton","height","mt","width","useFarmsWithBalance","farmsWithBalances","setFarmsWithBalances","fetchBalances","calls","rawResults","results","farmsConfig","filter","map","getMasterChefAddress","name","params","multicall","masterChefABI","index","CardBusdValue","Block","DIBHarvestBalance","farmsWithBalance","earningsSum","reduce","accum","earning","earningNumber","eq","dibPriceBusd","earningsBusd","multipliedBy","gt","DIBWalletBalance","dibBalance","busdBalance","balanceNumber","_Fragment","StyledFarmStakingCard","Label","colors","textSubtle","Actions","_templateObject4","FarmedStakingCard","pendingTx","setPendingTx","toastError","useToast","useReferrer","balancesWithValue","balanceType","harvestAllFarms","useCallback","_iterator","_step","farmWithBalance","_createForOfIteratorHelper","s","n","done","message","t1","e","f","finish","disabled","count","useLocalStorage","key","initialValue","item","window","localStorage","getItem","JSON","parse","storedValue","setStoredValue","valueToStore","Function","setItem","stringify","queryReferal","useParams","referal","_useLocalStorage","decodeReferal","encodedReferal","defaultAddress","EMPTY_ADDRESS","decoded","replace","base58","decode","referalAddress","utils","toChecksumAddress","isAddress"],"mappings":"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","file":"static/js/2.10c6254d.chunk.js","sourcesContent":["import { useMemo } from 'react'\nimport useWeb3 from 'hooks/useWeb3'\nimport {\n  getBep20Contract,\n  getDIBContract,\n  getMasterchefContract,\n  getSouschefContract,\n  getErc721Contract,\n  getSouschefV2Contract,\n  getReferralsContract,\n  getGameContract,\n  getGameFactoryContract,\n} from 'utils/contractHelpers'\n\n/**\n * Helper hooks to get specific contracts (by ABI)\n */\n\nexport const useERC20 = (address: string) => {\n  const web3 = useWeb3()\n  return useMemo(() => getBep20Contract(address, web3), [address, web3])\n}\n\n/**\n * @see https://docs.openzeppelin.com/contracts/3.x/api/token/erc721\n */\nexport const useERC721 = (address: string) => {\n  const web3 = useWeb3()\n  return useMemo(() => getErc721Contract(address, web3), [address, web3])\n}\n\nexport const useDIB = () => {\n  const web3 = useWeb3()\n  return useMemo(() => getDIBContract(web3), [web3])\n}\n\nexport const useMasterchef = () => {\n  const web3 = useWeb3()\n  return useMemo(() => getMasterchefContract(web3), [web3])\n}\n\nexport const useSousChef = (id) => {\n  const web3 = useWeb3()\n  return useMemo(() => getSouschefContract(id, web3), [id, web3])\n}\n\nexport const useSousChefV2 = (id) => {\n  const web3 = useWeb3()\n  return useMemo(() => getSouschefV2Contract(id, web3), [id, web3])\n}\n\nexport const useReferrals = () => {\n  const web3 = useWeb3()\n  return useMemo(() => getReferralsContract(web3), [web3])\n}\n\nexport const useGameFactory = () => {\n  const web3 = useWeb3()\n  return useMemo(() => getGameFactoryContract(web3), [web3])\n}\n\nexport const useGame = (gameAddress: string) => {\n  const web3 = useWeb3()\n  return useMemo(() => getGameContract(gameAddress, web3), [gameAddress, web3])\n}\n","import { useEffect, useState, useRef } from 'react'\nimport Web3 from 'web3'\nimport { useWeb3React } from '@web3-react/core'\nimport web3NoAccount from 'utils/web3'\n\n/**\n * Provides a web3 instance using the provider provided by useWallet\n * with a fallback of an httpProver\n * Recreate web3 instance only if the provider change\n */\nconst useWeb3 = () => {\n  const { library } = useWeb3React()\n  const refEth = useRef(library)\n  const [web3, setweb3] = useState(library ? new Web3(library) : web3NoAccount)\n\n  useEffect(() => {\n    if (library !== refEth.current) {\n      setweb3(library ? new Web3(library) : web3NoAccount)\n      refEth.current = library\n    }\n  }, [library])\n\n  return web3\n}\n\nexport default useWeb3\n","import { useEffect, useState } from 'react'\nimport BigNumber from 'bignumber.js'\nimport { useWeb3React } from '@web3-react/core'\nimport { getBep20Contract, getDIBContract, getMasterchefContract } from 'utils/contractHelpers'\nimport { BIG_ZERO } from 'utils/bigNumber'\nimport useWeb3 from './useWeb3'\nimport useRefresh from './useRefresh'\nimport useLastUpdated from './useLastUpdated'\n\ntype UseTokenBalanceState = {\n  balance: BigNumber\n  fetchStatus: FetchStatus\n}\n\nexport enum FetchStatus {\n  NOT_FETCHED = 'not-fetched',\n  SUCCESS = 'success',\n  FAILED = 'failed',\n}\n\nconst useTokenBalance = (tokenAddress: string) => {\n  const { NOT_FETCHED, SUCCESS, FAILED } = FetchStatus\n  const [balanceState, setBalanceState] = useState<UseTokenBalanceState>({\n    balance: BIG_ZERO,\n    fetchStatus: NOT_FETCHED,\n  })\n  const { account } = useWeb3React()\n  const { fastRefresh } = useRefresh()\n\n  useEffect(() => {\n    const fetchBalance = async () => {\n      const contract = getBep20Contract(tokenAddress)\n      try {\n        const res = await contract.methods.balanceOf(account).call()\n        setBalanceState({ balance: new BigNumber(res), fetchStatus: SUCCESS })\n      } catch (e) {\n        console.error(e)\n        setBalanceState((prev) => ({\n          ...prev,\n          fetchStatus: FAILED,\n        }))\n      }\n    }\n\n    if (account) {\n      fetchBalance()\n    }\n  }, [account, tokenAddress, fastRefresh, SUCCESS, FAILED])\n\n  return balanceState\n}\n\nexport const useTotalSupply = () => {\n  const { slowRefresh } = useRefresh()\n  const [totalSupply, setTotalSupply] = useState<BigNumber>()\n\n  useEffect(() => {\n    async function fetchTotalSupply() {\n      const cakeContract = getDIBContract()\n      const supply = await cakeContract.methods.totalSupply().call()\n      setTotalSupply(new BigNumber(supply))\n    }\n\n    fetchTotalSupply()\n  }, [slowRefresh])\n\n  return totalSupply\n}\n\nexport const useDIBPerSecond = () => {\n  const { slowRefresh } = useRefresh()\n  const [dibPerSecond, setDibPerSecond] = useState<BigNumber>(BIG_ZERO)\n\n  useEffect(() => {\n    async function fetchDibPerSecond() {\n      const masterChefContract = getMasterchefContract()\n      const perSecond = await masterChefContract.methods.lfgPerSecond().call()\n      // console.log(\"perSecond\", perSecond);\n      setDibPerSecond(new BigNumber(perSecond))\n    }\n\n    fetchDibPerSecond()\n  }, [slowRefresh])\n\n  return dibPerSecond\n}\n\nexport const useBurnedBalance = (tokenAddress: string) => {\n  const [balance, setBalance] = useState(BIG_ZERO)\n  const { slowRefresh } = useRefresh()\n\n  useEffect(() => {\n    const fetchBalance = async () => {\n      const contract = getBep20Contract(tokenAddress)\n      const res = await contract.methods.balanceOf('0x0000000000000000000000000000000000000000dEaD').call()\n      setBalance(new BigNumber(res))\n    }\n\n    fetchBalance()\n  }, [tokenAddress, slowRefresh])\n\n  return balance\n}\n\nexport const useDIBBurnedBalance = () => {\n  const [balance, setBalance] = useState(BIG_ZERO)\n  const { slowRefresh } = useRefresh()\n\n  useEffect(() => {\n    const fetchBalance = async () => {\n      const contract = getDIBContract()\n      const res = await contract.methods.totalFees().call()\n      setBalance(new BigNumber(res).div(new BigNumber(3))) // 1/3 of total fees are burning\n    }\n\n    fetchBalance()\n  }, [slowRefresh])\n\n  return balance\n}\n\nexport const useGetBnbBalance = () => {\n  const [balance, setBalance] = useState(BIG_ZERO)\n  const { account } = useWeb3React()\n  const { lastUpdated, setLastUpdated } = useLastUpdated()\n  const web3 = useWeb3()\n\n  useEffect(() => {\n    const fetchBalance = async () => {\n      const walletBalance = await web3.eth.getBalance(account)\n      setBalance(new BigNumber(walletBalance))\n    }\n\n    if (account) {\n      fetchBalance()\n    }\n  }, [account, web3, lastUpdated, setBalance])\n\n  return { balance, refresh: setLastUpdated }\n}\n\nexport default useTokenBalance\n","import BigNumber from 'bignumber.js'\nimport { CHAIN_ID, DEFAULT_TOKEN_DECIMAL } from 'config'\nimport { ethers } from 'ethers'\nimport { Pair, TokenAmount, Token } from '@pancakeswap-libs/sdk'\nimport { getLpContract, getMasterchefContract } from 'utils/contractHelpers'\nimport farms from 'config/constants/farms'\nimport { getAddress, getDIBAddress } from 'utils/addressHelpers'\nimport tokens from 'config/constants/tokens'\nimport { web3WithArchivedNodeProvider } from './web3'\nimport { getBalanceAmount } from './formatBalance'\nimport { BIG_TEN, BIG_ZERO } from './bigNumber'\n\nexport const approve = async (lpContract, masterChefContract, account) => {\n  return lpContract.methods\n    .approve(masterChefContract.options.address, ethers.constants.MaxUint256)\n    .send({ from: account })\n}\n\nconst txHashCallback = (tx) => tx.transactionHash\n\nexport const stake = async (\n  masterChefContract,\n  pid,\n  amount,\n  lockPeriod,\n  proof,\n  account,\n  decimals = DEFAULT_TOKEN_DECIMAL,\n) => {\n  return masterChefContract.methods\n    .deposit(pid, new BigNumber(amount).times(decimals).toString(), lockPeriod, proof)\n    .send({ from: account })\n    .on('transactionHash', txHashCallback)\n}\n\nexport const sousStake = async (sousChefContract, amount, decimals = 18, account) => {\n  return sousChefContract.methods\n    .deposit(new BigNumber(amount).times(BIG_TEN.pow(decimals)).toString())\n    .send({ from: account })\n    .on('transactionHash', txHashCallback)\n}\n\nexport const sousStakeBnb = async (sousChefContract, amount, account) => {\n  return sousChefContract.methods\n    .deposit()\n    .send({\n      from: account,\n      value: new BigNumber(amount).times(DEFAULT_TOKEN_DECIMAL).toString(),\n    })\n    .on('transactionHash', txHashCallback)\n}\n\nexport const unstake = async (masterChefContract, pid, amount, account, decimals = DEFAULT_TOKEN_DECIMAL) => {\n  return masterChefContract.methods\n    .withdraw(pid, new BigNumber(amount).times(decimals).toString())\n    .send({ from: account })\n    .on('transactionHash', txHashCallback)\n}\n\nexport const sousUnstake = async (sousChefContract, amount, decimals, account) => {\n  return sousChefContract.methods\n    .withdraw(new BigNumber(amount).times(BIG_TEN.pow(decimals)).toString())\n    .send({ from: account })\n    .on('transactionHash', txHashCallback)\n}\n\nexport const sousEmergencyUnstake = async (sousChefContract, account) => {\n  return sousChefContract.methods.emergencyWithdraw().send({ from: account }).on('transactionHash', txHashCallback)\n}\n\nexport const harvest = async (masterChefContract, pid, referrer, account) => {\n  return masterChefContract.methods\n    .deposit(pid, '0', 0, [])\n    .send({ from: account })\n    .on('transactionHash', txHashCallback)\n}\n\nexport const soushHarvest = async (sousChefContract, account) => {\n  return sousChefContract.methods.deposit('0').send({ from: account }).on('transactionHash', txHashCallback)\n}\n\nexport const soushHarvestBnb = async (sousChefContract, account) => {\n  return sousChefContract.methods\n    .deposit()\n    .send({ from: account, value: BIG_ZERO })\n    .on('transactionHash', txHashCallback)\n}\n\nconst chainId = parseInt(CHAIN_ID, 10)\nconst dibWethPid = 0\nconst dibWethFarm = farms.find((farm) => farm.pid === dibWethPid)\n\nconst DIB_TOKEN = new Token(chainId, getDIBAddress(), 18)\nconst WETH_TOKEN = new Token(chainId, tokens.weth.address[chainId], 18)\nconst DIB_WETH_TOKEN = new Token(chainId, getAddress(dibWethFarm.lpAddresses), 18)\n\n/**\n * Returns the total DIB staked in the DIB-BNB LP\n */\nexport const getUserStakeInDibWethLp = async (account: string, block?: number) => {\n  try {\n    const masterContract = getMasterchefContract(web3WithArchivedNodeProvider)\n    const dibWethContract = getLpContract(getAddress(dibWethFarm.lpAddresses), web3WithArchivedNodeProvider)\n    const totalSupplyLP = await dibWethContract.methods.totalSupply().call(undefined, block)\n    const reservesLP = await dibWethContract.methods.getReserves().call(undefined, block)\n    const dibWethBalance = await masterContract.methods.userInfo(dibWethFarm, account).call(undefined, block)\n\n    const pair: Pair = new Pair(\n      new TokenAmount(DIB_TOKEN, reservesLP._reserve0.toString()),\n      new TokenAmount(WETH_TOKEN, reservesLP._reserve1.toString()),\n    )\n    const cakeLPBalance = pair.getLiquidityValue(\n      pair.token0,\n      new TokenAmount(DIB_WETH_TOKEN, totalSupplyLP.toString()),\n      new TokenAmount(DIB_WETH_TOKEN, dibWethBalance.amount.toString()),\n      false,\n    )\n\n    return new BigNumber(cakeLPBalance.toSignificant(18))\n  } catch (error) {\n    console.error(`DIB-BNB LP error: ${error}`)\n    return BIG_ZERO\n  }\n}\n\n/**\n * Gets the dib staked in the main pool\n */\nexport const getUserStakeInDIBPool = async (account: string, block?: number) => {\n  try {\n    const masterContract = getMasterchefContract(web3WithArchivedNodeProvider)\n    const response = await masterContract.methods.userInfo(0, account).call(undefined, block)\n\n    return getBalanceAmount(new BigNumber(response.amount))\n  } catch (error) {\n    console.error('Error getting stake in DIB pool', error)\n    return BIG_ZERO\n  }\n}\n","import React, { useEffect, useRef } from 'react'\nimport { useCountUp } from 'react-countup'\nimport { Text } from 'uikit'\n\nexport interface CardValueProps {\n  value: number\n  decimals?: number\n  fontSize?: string\n  lineHeight?: string\n  prefix?: string\n  bold?: boolean\n  color?: string\n}\n\nconst CardValue: React.FC<CardValueProps> = ({\n  value,\n  decimals,\n  fontSize = '40px',\n  lineHeight = '1',\n  prefix = '',\n  bold = true,\n  color = 'text',\n}) => {\n  let _decimals = decimals\n  if (typeof decimals === 'undefined') {\n    if (value < 0) {\n      _decimals = 4\n    } else {\n      _decimals = value > 1e3 ? 0 : 3\n    }\n  }\n\n  const { countUp, update } = useCountUp({\n    start: 0,\n    end: value,\n    duration: 1,\n    separator: ',',\n    decimals: _decimals,\n  })\n\n  const updateValue = useRef(update)\n\n  useEffect(() => {\n    updateValue.current(value)\n  }, [value, _decimals, updateValue])\n\n  return (\n    <Text bold={bold} fontSize={fontSize} style={{ lineHeight }} color={color}>\n      {prefix}\n      {countUp}\n    </Text>\n  )\n}\n\nexport default CardValue\n","import React from 'react'\nimport { Button, useWalletModal } from 'uikit'\nimport useAuth from 'hooks/useAuth'\nimport { useTranslation } from 'contexts/Localization'\n\nconst UnlockButton = (props) => {\n  const { t } = useTranslation()\n  const { login, logout } = useAuth()\n  const { onPresentConnectModal } = useWalletModal(login, logout)\n\n  return (\n    <Button onClick={onPresentConnectModal} {...props}>\n      {t('Unlock Wallet')}\n    </Button>\n  )\n}\n\nexport default UnlockButton\n","import React from 'react'\nimport styled from 'styled-components'\nimport { Heading, LinkExternal } from 'uikit'\n\nconst Hero = styled.div`\n  align-items: center;\n  background-image: url('/banner.png');\n  background-repeat: no-repeat;\n  background-position: right 20px top;\n  display: flex;\n  justify-content: flex-start;\n  flex-direction: column;\n  margin: auto;\n  margin-bottom: 32px;\n  padding: 20px;\n  padding-top: 50px;\n  padding-bottom: 50px;\n  background-color: #10141e;\n  border-radius: 32px;\n  color: #fff;\n\n  img {\n    max-height: 100%;\n    max-width: 200px;\n    margin: 10px;\n  }\n\n  ${({ theme }) => theme.mediaQueries.lg} {\n    height: 320px;\n    padding: 65px 70px;\n\n    flex-direction: row;\n  }\n`\n\nconst HeroDescription = styled.div`\n  font-size: 14px;\n  color: #9199b0;\n  margin-top: 20px;\n  margin-bottom: 40px;\n`\n\nconst StyledExternalLink = styled(LinkExternal)`\n  color: #fff;\n  svg {\n    fill: #fff;\n  }\n`\n\nconst TutorialBanner = () => {\n  return (\n    <Hero>\n      <div>\n        <Heading as=\"h1\" scale=\"xxl\" mb=\"16px\" color=\"white\">\n          DIB Yield\n        </Heading>\n        <HeroDescription>Earn rewards by providing liquidity.</HeroDescription>\n        <StyledExternalLink href=\"https://docs.dibyield.com/get-started-with-dib-yield\">Tutorial</StyledExternalLink>\n      </div>\n    </Hero>\n  )\n}\n\nexport default TutorialBanner\n","import React from 'react'\nimport { Card, CardBody, Heading, Skeleton, Text } from 'uikit'\nimport styled from 'styled-components'\nimport { getBalanceNumber } from 'utils/formatBalance'\nimport { useTotalSupply, useDIBPerSecond } from 'hooks/useTokenBalance'\nimport { useTranslation } from 'contexts/Localization'\nimport { usePriceDIBUsdc, useTotalValue } from 'state/hooks'\nimport CardValue from './CardValue'\n\nconst StyledDIBStats = styled(Card)`\n  margin-left: auto;\n  margin-right: auto;\n`\n\nconst Row = styled.div`\n  align-items: center;\n  display: flex;\n  font-size: 14px;\n  justify-content: space-between;\n  margin-bottom: 8px;\n`\n\nconst DIBStats = () => {\n  const { t } = useTranslation()\n\n  const tvlData = useTotalValue()\n  const tvl = tvlData ? tvlData.toLocaleString('en-US', { maximumFractionDigits: 1 }) : null\n\n  const dibUsdcPrice = usePriceDIBUsdc().toNumber()\n  const totalSupply = getBalanceNumber(useTotalSupply()) || 0\n  const dibPerSecond = getBalanceNumber(useDIBPerSecond())\n  const totalMinted = totalSupply\n  const marketCap = totalSupply * dibUsdcPrice\n\n  return (\n    <StyledDIBStats>\n      <CardBody>\n        <Heading color=\"#9199B0\" textAlign=\"right\" mb=\"24px\">\n          {t('Total Value Locked')}\n        </Heading>\n        {tvlData ? <Heading scale=\"xl\">{`$${tvl}`} staked</Heading> : <Skeleton height={66} />}\n        <Heading color=\"#9199B0\" textAlign=\"right\" mb=\"24px\" mt=\"24px\">\n          {t('DIB Stats')}\n        </Heading>\n        <Row>\n          <Text fontSize=\"14px\">{t('Market cap')}</Text>\n          {marketCap > 0 ? (\n            <CardValue prefix=\"$\" fontSize=\"14px\" value={marketCap} />\n          ) : (\n            <Skeleton width={80} height={24} />\n          )}\n        </Row>\n        <Row>\n          <Text fontSize=\"14px\">{t('Circulating Supply')}</Text>\n          {totalSupply && <CardValue fontSize=\"14px\" value={totalSupply} decimals={1} />}\n        </Row>\n        <Row>\n          <Text fontSize=\"14px\">{t('Total Minted')}</Text>\n          {totalMinted && <CardValue fontSize=\"14px\" decimals={1} value={totalMinted} />}\n        </Row>\n        {/* <Row>\n          <Text fontSize=\"14px\">{t('Total Burned')}</Text>\n          {burnedBalance && <CardValue fontSize=\"14px\" decimals={1} value={burnedBalance} />}\n        </Row> */}\n        {/* <Row>\n          <Text fontSize=\"14px\">{t('Maximum Supply')}</Text>\n          <CardValue fontSize=\"14px\" value={420000000} />\n        </Row> */}\n        <Row>\n          <Text fontSize=\"14px\">{t('New DIB/second')}</Text>\n          <CardValue fontSize=\"14px\" decimals={1} value={dibPerSecond} />\n        </Row>\n      </CardBody>\n    </StyledDIBStats>\n  )\n}\n\nexport default DIBStats\n","import { useEffect, useState } from 'react'\nimport BigNumber from 'bignumber.js'\nimport { useWeb3React } from '@web3-react/core'\nimport multicall from 'utils/multicall'\nimport { getMasterChefAddress } from 'utils/addressHelpers'\nimport masterChefABI from 'config/abi/masterchef.json'\nimport { farmsConfig } from 'config/constants'\nimport { FarmConfig } from 'config/constants/types'\nimport useRefresh from './useRefresh'\n\nexport interface FarmWithBalance extends FarmConfig {\n  balance: BigNumber\n}\n\nconst useFarmsWithBalance = () => {\n  const [farmsWithBalances, setFarmsWithBalances] = useState<FarmWithBalance[]>([])\n  const { account } = useWeb3React()\n  const { fastRefresh } = useRefresh()\n\n  useEffect(() => {\n    const fetchBalances = async () => {\n      const calls = farmsConfig\n        .filter((farm) => farm.pid || farm.pid === 0)\n        .map((farm) => ({\n          address: getMasterChefAddress(),\n          name: 'pendingTokens',\n          params: [farm.pid, account],\n        }))\n\n      try {\n        const rawResults = await multicall(masterChefABI, calls)\n        const results = farmsConfig.map((farm, index) => ({ ...farm, balance: new BigNumber(rawResults[index]) }))\n\n        setFarmsWithBalances(results)\n      } catch (e: any) {\n        console.error('Fetch Farms With Balance Error:', e)\n      }\n    }\n\n    if (account) {\n      fetchBalances()\n    }\n  }, [account, fastRefresh])\n\n  return farmsWithBalances\n}\n\nexport default useFarmsWithBalance\n","import React from 'react'\nimport CardValue, { CardValueProps } from './CardValue'\n\nconst CardBusdValue: React.FC<CardValueProps> = (props) => {\n  return (\n    <CardValue fontSize=\"14px\" lineHeight=\"1.1\" color=\"textSubtle\" prefix=\"~$\" bold={false} decimals={2} {...props} />\n  )\n}\n\nexport default CardBusdValue\n","import React from 'react'\nimport { Text } from 'uikit'\nimport { useWeb3React } from '@web3-react/core'\nimport BigNumber from 'bignumber.js'\nimport { useTranslation } from 'contexts/Localization'\nimport { FarmWithBalance } from 'hooks/useFarmsWithBalance'\nimport { usePriceDIBUsdc } from 'state/hooks'\nimport styled from 'styled-components'\nimport { DEFAULT_TOKEN_DECIMAL } from 'config'\nimport CardValue from './CardValue'\nimport CardBusdValue from './CardBusdValue'\n\nconst Block = styled.div`\n  margin-bottom: 24px;\n`\n\ninterface DIBHarvestBalanceProps {\n  farmsWithBalance: FarmWithBalance[]\n}\n\nconst DIBHarvestBalance: React.FC<DIBHarvestBalanceProps> = ({ farmsWithBalance }) => {\n  const { t } = useTranslation()\n  const { account } = useWeb3React()\n  const earningsSum = farmsWithBalance.reduce((accum, earning) => {\n    const earningNumber = new BigNumber(earning.balance)\n    if (earningNumber.eq(0)) {\n      return accum\n    }\n    return accum + earningNumber.div(DEFAULT_TOKEN_DECIMAL).toNumber()\n  }, 0)\n  const dibPriceBusd = usePriceDIBUsdc()\n  const earningsBusd = new BigNumber(earningsSum).multipliedBy(dibPriceBusd).toNumber()\n\n  if (!account) {\n    return (\n      <Text color=\"textDisabled\" style={{ lineHeight: '76px' }}>\n        {t('Locked')}\n      </Text>\n    )\n  }\n\n  return (\n    <Block>\n      <CardValue value={earningsSum} lineHeight=\"1.5\" />\n      {dibPriceBusd.gt(0) && <CardBusdValue value={earningsBusd} />}\n    </Block>\n  )\n}\n\nexport default DIBHarvestBalance\n","import React from 'react'\nimport { Text } from 'uikit'\nimport { useWeb3React } from '@web3-react/core'\nimport useTokenBalance from 'hooks/useTokenBalance'\nimport { useTranslation } from 'contexts/Localization'\nimport { getDIBAddress } from 'utils/addressHelpers'\nimport { getBalanceNumber } from 'utils/formatBalance'\nimport { usePriceDIBUsdc } from 'state/hooks'\nimport { BigNumber } from 'bignumber.js'\nimport CardValue from './CardValue'\nimport CardBusdValue from './CardBusdValue'\n\nconst DIBWalletBalance = () => {\n  const { t } = useTranslation()\n  const { balance: dibBalance } = useTokenBalance(getDIBAddress())\n  const dibPriceBusd = usePriceDIBUsdc()\n  const busdBalance = new BigNumber(getBalanceNumber(dibBalance)).multipliedBy(dibPriceBusd).toNumber()\n  const { account } = useWeb3React()\n\n  if (!account) {\n    return (\n      <Text color=\"textDisabled\" style={{ lineHeight: '54px' }}>\n        {t('Locked')}\n      </Text>\n    )\n  }\n\n  const balanceNumber = getBalanceNumber(dibBalance)\n\n  return (\n    <>\n      <CardValue value={balanceNumber} fontSize=\"24px\" lineHeight=\"36px\" />\n      {dibPriceBusd.gt(0) ? <CardBusdValue value={busdBalance} /> : <br />}\n    </>\n  )\n}\n\nexport default DIBWalletBalance\n","import React, { useState, useCallback } from 'react'\nimport styled from 'styled-components'\nimport { Heading, Card, CardBody, Button } from 'uikit'\nimport { harvest } from 'utils/callHelpers'\nimport { useWeb3React } from '@web3-react/core'\nimport { useTranslation } from 'contexts/Localization'\nimport useFarmsWithBalance from 'hooks/useFarmsWithBalance'\nimport { useMasterchef } from 'hooks/useContract'\nimport useToast from 'hooks/useToast'\nimport useReferrer from 'hooks/useReferrer'\nimport UnlockButton from 'components/UnlockButton'\nimport DIBHarvestBalance from './DIBHarvestBalance'\nimport DIBWalletBalance from './DIBWalletBalance'\n\nconst StyledFarmStakingCard = styled(Card)`\n  background-repeat: no-repeat;\n  background-position: bottom 60px right;\n  min-height: 376px;\n`\n\nconst Block = styled.div`\n  margin-bottom: 16px;\n`\n\nconst Label = styled.div`\n  color: ${({ theme }) => theme.colors.textSubtle};\n  font-size: 14px;\n`\n\nconst Actions = styled.div`\n  margin-top: 24px;\n`\n\nconst FarmedStakingCard = () => {\n  const [pendingTx, setPendingTx] = useState(false)\n  const { account } = useWeb3React()\n  const { t } = useTranslation()\n  const { toastError } = useToast()\n  const referrer = useReferrer()\n  const farmsWithBalance = useFarmsWithBalance()\n  const masterChefContract = useMasterchef()\n  const balancesWithValue = farmsWithBalance.filter((balanceType) => balanceType.balance.gt(0))\n\n  const harvestAllFarms = useCallback(async () => {\n    setPendingTx(true)\n    // eslint-disable-next-line no-restricted-syntax\n    for (const farmWithBalance of balancesWithValue) {\n      try {\n        // eslint-disable-next-line no-await-in-loop\n        await harvest(masterChefContract, farmWithBalance.pid, referrer, account)\n      } catch (error: any) {\n        toastError(t('Error'), error?.message)\n      }\n    }\n    setPendingTx(false)\n  }, [account, balancesWithValue, masterChefContract, toastError, t, referrer])\n\n  return (\n    <StyledFarmStakingCard>\n      <CardBody>\n        <Heading color=\"#9199B0\" textAlign=\"right\" mb=\"24px\">\n          {t('Farms & Staking')}\n        </Heading>\n        <Block>\n          <Label>{t('DIB to Harvest')}:</Label>\n          <DIBHarvestBalance farmsWithBalance={balancesWithValue} />\n        </Block>\n        <Block>\n          <Label>{t('DIB in Wallet')}:</Label>\n          <DIBWalletBalance />\n        </Block>\n        <Actions>\n          {account ? (\n            <Button\n              id=\"harvest-all\"\n              disabled={balancesWithValue.length <= 0 || pendingTx}\n              onClick={harvestAllFarms}\n              width=\"100%\"\n            >\n              {pendingTx\n                ? t('Collecting DIB')\n                : t('Harvest all (%count%)', {\n                    count: balancesWithValue.length,\n                  })}\n            </Button>\n          ) : (\n            <UnlockButton width=\"100%\" />\n          )}\n        </Actions>\n      </CardBody>\n    </StyledFarmStakingCard>\n  )\n}\n\nexport default FarmedStakingCard\n","import { useState } from 'react'\n\nconst useLocalStorage = (key, initialValue) => {\n  // State to store our value\n  // Pass initial state function to useState so logic is only executed once\n  const [storedValue, setStoredValue] = useState(() => {\n    try {\n      // Get from local storage by key\n      const item = window.localStorage.getItem(key)\n      // Parse stored json or if none return initialValue\n      return item ? JSON.parse(item) : initialValue\n    } catch (error) {\n      // If error also return initialValue\n      console.error(error)\n      return initialValue\n    }\n  })\n  // Return a wrapped version of useState's setter function that ...\n  // ... persists the new value to localStorage.\n  const setValue = (value) => {\n    try {\n      // Allow value to be a function so we have same API as useState\n      const valueToStore = value instanceof Function ? value(storedValue) : value\n      // Save state\n      setStoredValue(valueToStore)\n      // Save to local storage\n      window.localStorage.setItem(key, JSON.stringify(valueToStore))\n    } catch (error) {\n      // A more advanced implementation would handle the error case\n      console.error(error)\n    }\n  }\n  return [storedValue, setValue]\n}\n\nexport default useLocalStorage\n","import { useParams } from 'react-router'\n\nimport useLocalStorage from './useLocalStorage'\nimport { decodeReferal } from '../utils/referalUtils'\n\nconst useReferrer = () => {\n  const params = useParams<any>()\n  const queryReferal = params.referal as string\n  const [referal] = useLocalStorage('referal', queryReferal)\n\n  const referalAddress = decodeReferal(referal)\n\n  return referalAddress\n}\n\nexport default useReferrer\n","import base58 from 'b58'\nimport web3 from 'web3'\nimport { BASE_URL, EMPTY_ADDRESS } from '../config'\n\nconst btoa = (s: string) => base58.encode(Buffer.from(s, 'hex'))\nconst atob = (s: string) => base58.decode(s).toString('hex')\n\nconst BASE_PREFIX = '0x'\nconst ENCODED_PREFIX = 'Rr'\n\nexport const encodeReferal = (refererAddress: string) => {\n  const address = web3.utils.toChecksumAddress(refererAddress)\n  const encoded = btoa(address.replace(BASE_PREFIX, ''))\n  return `${ENCODED_PREFIX}${encoded}`\n}\n\nexport const getRefralLink = (refererAddress: string) => {\n  if (!refererAddress) throw new Error('No referer address provided')\n\n  const refererCode = encodeReferal(refererAddress)\n\n  return `${BASE_URL}/r/${refererCode}`\n}\n\nexport const decodeReferal = (encodedReferal: string) => {\n  const defaultAddress = EMPTY_ADDRESS\n\n  if (!encodedReferal) return defaultAddress\n\n  const decoded = atob(encodedReferal.replace(ENCODED_PREFIX, ''))\n  let referalAddress = ''\n  try {\n    referalAddress = web3.utils.toChecksumAddress(`${BASE_PREFIX}${decoded}`)\n  } catch (e) {\n    console.error('wrong referal')\n  }\n\n  if (!web3.utils.isAddress(referalAddress)) return defaultAddress\n\n  return referalAddress\n}\n"],"sourceRoot":""}