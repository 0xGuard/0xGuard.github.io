{"version":3,"sources":["hooks/useContract.ts","hooks/useWeb3.ts","hooks/useTokenBalance.ts","components/Spacer/Spacer.tsx","components/ModalActions/ModalActions.tsx","components/ModalInput/ModalInput.tsx","views/Farms/components/FarmTable/CellLayout.tsx","views/Game/hooks/useGames.ts","views/Game/utils/index.ts","components/PromiseClickButton/index.tsx","views/Game/components/DepositModal.tsx","views/Game/components/AdminTools/index.tsx","views/Game/components/GameBanner/index.tsx","views/Game/components/GameRow/index.tsx","views/Game/components/GamesTabe/index.tsx","views/Game/Game.tsx"],"names":["useERC20","address","web3","useWeb3","useMemo","getBep20Contract","useDIB","getDIBContract","useMasterchef","getMasterchefContract","useSousChef","id","getSouschefContract","useGameFactory","getGameFactoryContract","library","useWeb3React","refEth","useRef","_useState","useState","Web3","web3NoAccount","_useState2","_slicedToArray","setweb3","useEffect","current","FetchStatus","useTotalSupply","slowRefresh","useRefresh","_useState3","_useState4","totalSupply","setTotalSupply","_fetchTotalSupply","_asyncToGenerator","_regeneratorRuntime","mark","_callee2","cakeContract","supply","wrap","_context2","prev","next","methods","call","sent","BigNumber","stop","apply","arguments","fetchTotalSupply","useDIBPerSecond","_useState5","BIG_ZERO","_useState6","dibPerSecond","setDibPerSecond","_fetchDibPerSecond","_callee3","masterChefContract","perSecond","_context3","lfgPerSecond","fetchDibPerSecond","useTokenBalance","tokenAddress","NOT_FETCHED","SUCCESS","FAILED","balance","fetchStatus","balanceState","setBalanceState","account","fastRefresh","fetchBalance","_ref","_callee","contract","res","_context","balanceOf","t0","console","error","_objectSpread","StyledSpacer","styled","div","_templateObject","_taggedTemplateLiteral","props","size","Spacer","s","_ref$size","spacing","useContext","ThemeContext","_jsx","StyledModalActions","theme","colors","primaryDark","StyledModalAction","_templateObject2","ModalActions","children","l","React","Children","toArray","length","map","child","i","_jsxs","_Fragment","StyledTokenInput","_ref2","input","_ref$isWarning","isWarning","shadows","warning","inset","_ref3","text","StyledInput","Input","_ref4","mediaQueries","xs","_ref5","sm","StyledErrorMessage","Text","_templateObject3","ModalInput","_ref6","max","symbol","onChange","onSelectMax","value","addLiquidityUrl","inputTitle","_ref6$decimals","decimals","t","useTranslation","isBalanceZero","style","position","Flex","justifyContent","pl","fontSize","balanceBigNumber","gt","lt","toLocaleString","toFixed","ROUND_DOWN","displayBalance","alignItems","pattern","concat","inputMode","step","min","placeholder","Button","scale","onClick","mr","color","Link","bold","href","external","Label","ContentContainer","CellLayout","_ref$label","label","dibToken","tokens","dib","GameState","gameFactoryAddress","getGameFactoryAddress","useGames","isLoading","setIsLoading","data","setData","dibContract","gameFactory","fetchAllGames","gamesLength","calls","games","gamesData","_loop","_i","push","name","params","multicall","gameFactoryAbi","gameCalls","results","gameData","method","gameAbi","reduce","acc","index","amount","claimed","endTime","parseFloat","toString","gameDuration","allowance","t1","tokenAllowance","BIG_TEN","pow","t2","delegateYield","finish","getBoss","gameId","bosses","image","getChanceToWinPercent","bossHp","power","roundTo","bnToNumber","formatUnits","getFormattedGameData","game","token","claimableAmount","rewardPerShare","depositAmount","possibleReward","deposits","getReward","totalDeposits","reward","chanceToWinPercent","digits","factor","Math","round","PromiseClickButton","disabled","_objectWithoutProperties","_excluded","loading","setLoading","handleClick","event","_x","Spinner","TextWrapper","Caption","ApproveButton","width","DepositModal","onConfirm","onDismiss","gameAddress","val","setVal","_useState7","_useState8","pendingTx","setPendingTx","fullBalance","getFullDisplayBalance","valNumber","fullBalanceNumber","handleChange","useCallback","e","currentTarget","validity","valid","replace","handleSelectMax","_useApprove","loadingAllowance","setLoadingAllowance","setAllowance","getAllowance","allowanceWei","dividedBy","handleApprove","tx","approve","ethers","constants","MaxUint256","send","from","abrupt","onApprove","useApprove","isApproved","isGreaterThanOrEqualTo","Modal","title","className","variant","isFinite","eq","AdminTools","setIsAdmin","isGameFinished","Date","now","canFinish","gameState","IN_PROGRESS","fetchIsAdmin","owner","toLowerCase","onFinish","finishGame","stake","gameContract","times","_x2","_x3","CountdownNumber","span","GameStateLabel","classNames","FINISHED","WIN","LOSE","join","GameOpponnet","hp","alt","src","GameInfoItem","caption","_useTooltip","useTooltip","placement","tooltipOffset","targetRef","tooltip","tooltipVisible","ref","HelpIcon","GameInfo","items","item","GameBalance","_ref7","dogHp","totalHp","bossWidth","dogWidth","GameBanner","_ref8","_useStake","handleStake","getGameContract","_x4","_x5","onStake","useStake","CHAIN_ID","tokenBalance","_ref9","_x6","_useMemo","boss","isActive","_useModal","useModal","onPresentDepositModal","infoItems","Countdown","date","renderer","args","completed","formatted","days","hours","minutes","seconds","StyledTr","tr","CellInner","GameRow","_useClaim","handleClaim","claimRewards","onClaim","useClaim","TableWrapper","StyledTable","table","TableBody","tbody","TableContainer","_templateObject4","ScrollButtonContainer","_templateObject5","GamesTable","tableWrapperEl","scrollIntoView","behavior","ChevronUpIcon","Game","_useGames","active","finished","forEach","includes","activeGames","sort","a","b","finishedGames","Page"],"mappings":"4HAAA,sMAkBaA,EAAW,SAACC,GACvB,IAAMC,EAAOC,cACb,OAAOC,mBAAQ,kBAAMC,YAAiBJ,EAASC,EAAK,GAAE,CAACD,EAASC,GAClE,EAUaI,EAAS,WACpB,IAAMJ,EAAOC,cACb,OAAOC,mBAAQ,kBAAMG,YAAeL,EAAK,GAAE,CAACA,GAC9C,EAEaM,EAAgB,WAC3B,IAAMN,EAAOC,cACb,OAAOC,mBAAQ,kBAAMK,YAAsBP,EAAK,GAAE,CAACA,GACrD,EAEaQ,EAAc,SAACC,GAC1B,IAAMT,EAAOC,cACb,OAAOC,mBAAQ,kBAAMQ,YAAoBD,EAAIT,EAAK,GAAE,CAACS,EAAIT,GAC3D,EAYaW,EAAiB,WAC5B,IAAMX,EAAOC,cACb,OAAOC,mBAAQ,kBAAMU,YAAuBZ,EAAK,GAAE,CAACA,GACtD,C,uFClCeC,IAfC,WACd,IAAQY,EAAYC,cAAZD,QACFE,EAASC,iBAAOH,GACtBI,EAAwBC,mBAASL,EAAU,IAAIM,IAAKN,GAAWO,KAAcC,EAAAC,YAAAL,EAAA,GAAtEjB,EAAIqB,EAAA,GAAEE,EAAOF,EAAA,GASpB,OAPAG,qBAAU,WACJX,IAAYE,EAAOU,UACrBF,EAAQV,EAAU,IAAIM,IAAKN,GAAWO,KACtCL,EAAOU,QAAUZ,EAErB,GAAG,CAACA,IAEGb,CACT,C,yMCTY0B,EAAW,SAAXA,GAAW,OAAXA,EAAW,0BAAXA,EAAW,kBAAXA,EAAW,gBAAXA,CAAW,MAsCVC,EAAiB,WAC5B,IAAQC,EAAgBC,cAAhBD,YACRE,EAAsCZ,qBAAqBa,EAAAT,YAAAQ,EAAA,GAApDE,EAAWD,EAAA,GAAEE,EAAcF,EAAA,GAYlC,OAVAP,qBAAU,WACuB,SAAAU,IAI9B,OAJ8BA,EAAAC,YAAAC,cAAAC,MAA/B,SAAAC,IAAA,IAAAC,EAAAC,EAAA,OAAAJ,cAAAK,MAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,OACuC,OAA/BL,EAAelC,cAAgBqC,EAAAE,KAAA,EAChBL,EAAaM,QAAQb,cAAcc,OAAM,OAAxDN,EAAME,EAAAK,KACZd,EAAe,IAAIe,IAAUR,IAAQ,wBAAAE,EAAAO,OAAA,GAAAX,EAAA,MACtCY,MAAA,KAAAC,UAAA,EALc,WACgBjB,EAAAgB,MAAC,KAADC,UAAA,CAM/BC,EACF,GAAG,CAACxB,IAEGI,CACT,EAEaqB,EAAkB,WAC7B,IAAQzB,EAAgBC,cAAhBD,YACR0B,EAAwCpC,mBAAoBqC,KAASC,EAAAlC,YAAAgC,EAAA,GAA9DG,EAAYD,EAAA,GAAEE,EAAeF,EAAA,GAapC,OAXAhC,qBAAU,WACwB,SAAAmC,IAK/B,OAL+BA,EAAAxB,YAAAC,cAAAC,MAAhC,SAAAuB,IAAA,IAAAC,EAAAC,EAAA,OAAA1B,cAAAK,MAAA,SAAAsB,GAAA,cAAAA,EAAApB,KAAAoB,EAAAnB,MAAA,OACoD,OAA5CiB,EAAqBtD,cAAuBwD,EAAAnB,KAAA,EAC1BiB,EAAmBhB,QAAQmB,eAAelB,OAAM,OAAlEgB,EAASC,EAAAhB,KAEfW,EAAgB,IAAIV,IAAUc,IAAW,wBAAAC,EAAAd,OAAA,GAAAW,EAAA,MAC1CV,MAAA,KAAAC,UAAA,EANc,WACiBQ,EAAAT,MAAC,KAADC,UAAA,CAOhCc,EACF,GAAG,CAACrC,IAEG6B,CACT,EAwDeS,IAzHS,SAACC,GACvB,IAAQC,EAAiC1C,EAAjC0C,YAAaC,EAAoB3C,EAApB2C,QAASC,EAAW5C,EAAX4C,OAC9BrD,EAAwCC,mBAA+B,CACrEqD,QAAShB,IACTiB,YAAaJ,IACb/C,EAAAC,YAAAL,EAAA,GAHKwD,EAAYpD,EAAA,GAAEqD,EAAerD,EAAA,GAI5BsD,EAAY7D,cAAZ6D,QACAC,EAAgB/C,cAAhB+C,YAsBR,OApBApD,qBAAU,WACR,IAAMqD,EAAY,eAAAC,EAAA3C,YAAAC,cAAAC,MAAG,SAAA0C,IAAA,IAAAC,EAAAC,EAAA,OAAA7C,cAAAK,MAAA,SAAAyC,GAAA,cAAAA,EAAAvC,KAAAuC,EAAAtC,MAAA,OAC4B,OAAzCoC,EAAW7E,YAAiBgE,GAAae,EAAAvC,KAAA,EAAAuC,EAAAtC,KAAA,EAE3BoC,EAASnC,QAAQsC,UAAUR,GAAS7B,OAAM,OAAtDmC,EAAGC,EAAAnC,KACT2B,EAAgB,CAAEH,QAAS,IAAIvB,IAAUiC,GAAMT,YAAaH,IAAUa,EAAAtC,KAAA,gBAAAsC,EAAAvC,KAAA,EAAAuC,EAAAE,GAAAF,EAAA,SAEtEG,QAAQC,MAAKJ,EAAAE,IACbV,GAAgB,SAAC/B,GAAI,OAAA4C,wBAAA,GAChB5C,GAAI,IACP6B,YAAaF,GAAM,IAClB,yBAAAY,EAAAjC,OAAA,GAAA8B,EAAA,kBAEN,kBAZiB,OAAAD,EAAA5B,MAAA,KAAAC,UAAA,KAcdwB,GACFE,GAEJ,GAAG,CAACF,EAASR,EAAcS,EAAaP,EAASC,IAE1CG,CACT,C,oHCpBMe,EAAeC,IAAOC,IAAGC,MAAAC,YAAA,6CACnB,SAACC,GAAK,OAAKA,EAAMC,IAAI,IACtB,SAACD,GAAK,OAAKA,EAAMC,IAAI,IAGjBC,EA5BuB,SAAHjB,GAAyB,IAGtDkB,EAHqDC,EAAAnB,EAAlBgB,YAAI,IAAAG,EAAG,KAAIA,EAC1CC,EAAYC,qBAAWC,KAAvBF,QAGR,OAAQJ,GACN,IAAK,KACHE,EAAIE,EAAQ,GACZ,MACF,IAAK,KACHF,EAAIE,EAAQ,GACZ,MAEF,QACEF,EAAIE,EAAQ,GAGhB,OAAOG,cAACb,EAAY,CAACM,KAAME,GAC7B,ECLMM,EAAqBb,IAAOC,IAAGC,MAAAC,YAAA,mHAEf,SAACC,GAAK,OAAKA,EAAMU,MAAMC,OAAOC,WAAW,IAGlD,SAACZ,GAAK,OAAKA,EAAMU,MAAML,QAAQ,EAAE,IAGxCQ,EAAoBjB,IAAOC,IAAGiB,MAAAf,YAAA,sBAIrBgB,EA1BgB,SAAH9B,GAAsB,IAAhB+B,EAAQ/B,EAAR+B,SAC1BC,EAAIC,IAAMC,SAASC,QAAQJ,GAAUK,OAC3C,OACEb,cAACC,EAAkB,CAAAO,SAChBE,IAAMC,SAASG,IAAIN,GAAU,SAACO,EAAOC,GAAC,OACrCC,eAAAC,WAAA,CAAAV,SAAA,CACER,cAACK,EAAiB,CAAAG,SAAEO,IACnBC,EAAIP,EAAI,GAAKT,cAACN,EAAM,MACpB,KAIX,C,kICSMyB,EAAmB/B,IAAOC,IAAGC,MAAAC,YAAA,6KAGb,SAAA6B,GAAQ,OAAAA,EAALlB,MAAkBC,OAAOkB,KAAK,IAXlC,SAAH5C,GAAsC,IAAD6C,EAAA7C,EAA/B8C,iBAAS,IAAAD,GAAQA,EAAEpB,EAAKzB,EAALyB,MACzC,OAAIqB,EACKrB,EAAMsB,QAAQC,QAGhBvB,EAAMsB,QAAQE,KACvB,IAQW,SAAAC,GAAQ,OAAAA,EAALzB,MAAkBC,OAAOyB,IAAI,IAKrCC,EAAczC,YAAO0C,IAAP1C,CAAakB,MAAAf,YAAA,oJAM7B,SAAAwC,GAAQ,OAAAA,EAAL7B,MAAkB8B,aAAaC,EAAE,IAIpC,SAAAC,GAAQ,OAAAA,EAALhC,MAAkB8B,aAAaG,EAAE,IAKlCC,EAAqBhD,YAAOiD,IAAPjD,CAAYkD,MAAA/C,YAAA,qFAmExBgD,EA3D+B,SAAHC,GASpC,IARLC,EAAGD,EAAHC,IACAC,EAAMF,EAANE,OACAC,EAAQH,EAARG,SACAC,EAAWJ,EAAXI,YACAC,EAAKL,EAALK,MACAC,EAAeN,EAAfM,gBACAC,EAAUP,EAAVO,WAAUC,EAAAR,EACVS,gBAAQ,IAAAD,EAAG,GAAEA,EAELE,EAAMC,cAAND,EACFE,EAAwB,MAARX,IAAgBA,EAatC,OACExB,eAAA,OAAKoC,MAAO,CAAEC,SAAU,YAAa9C,SAAA,CACnCS,eAACE,EAAgB,CAACI,UAAW6B,EAAc5C,SAAA,CACzCS,eAACsC,IAAI,CAACC,eAAe,gBAAgBC,GAAG,OAAMjD,SAAA,CAC5CR,cAACqC,IAAI,CAACqB,SAAS,OAAMlD,SAAEuC,IACvB/C,cAACqC,IAAI,CAACqB,SAAS,OAAMlD,SAAE0C,EAAE,qBAAsB,CAAEhF,QAhBlC,SAACA,GACtB,GAAIkF,EACF,MAAO,IAET,IAAMO,EAAmB,IAAIhH,YAAUuB,GACvC,OAAIyF,EAAiBC,GAAG,IAAMD,EAAiBE,GAAG,MACzCF,EAAiBG,iBAEnBH,EAAiBI,QAAQ,EAAGpH,YAAUqH,WAC/C,CAOkEC,CAAexB,UAE3ExB,eAACsC,IAAI,CAACW,WAAW,WAAWV,eAAe,eAAchD,SAAA,CACvDR,cAAC6B,EAAW,CACVsC,QAAO,uBAAAC,OAAyBnB,EAAQ,MACxCoB,UAAU,UACVC,KAAK,MACLC,IAAI,IACJ5B,SAAUA,EACV6B,YAAY,IACZ3B,MAAOA,IAET7C,cAACyE,IAAM,CAACC,MAAM,KAAKC,QAAS/B,EAAagC,GAAG,MAAKpE,SAC9C0C,EAAE,SAELlD,cAACqC,IAAI,CAACqB,SAAS,OAAMlD,SAAEkC,UAG1BU,GACCnC,eAACmB,EAAkB,CAACsB,SAAS,OAAOmB,MAAM,UAASrE,SAAA,CAChD0C,EAAE,sBAAsB,IAAE,IAC3BlD,cAAC8E,IAAI,CAACpB,SAAS,OAAOqB,MAAM,EAAOC,KAAMlC,EAAiBmC,UAAQ,EAACJ,MAAM,UAASrE,SAC/E0C,EAAE,eAAgB,CAAER,kBAMjC,C,uEClHMwC,EAAQ9F,IAAOC,IAAGC,MAAAC,YAAA,sKAUlB4F,EAAmB/F,IAAOC,IAAGiB,MAAAf,YAAA,yEAmBpB6F,IAT+B,SAAH3G,GAAkC,IAAD4G,EAAA5G,EAA3B6G,aAAK,IAAAD,EAAG,GAAEA,EAAE7E,EAAQ/B,EAAR+B,SAC3D,OACES,eAAA,OAAAT,SAAA,CACG8E,GAAStF,cAACkF,EAAK,CAAA1E,SAAE8E,IAClBtF,cAACmF,EAAgB,CAAA3E,SAAEA,MAGzB,C,qwBCbM+E,EAAWC,IAAOC,IAEZC,EAAS,SAATA,GAAS,OAATA,IAAS,6BAATA,IAAS,uBAATA,IAAS,aAATA,IAAS,eAATA,CAAS,MAyBfC,EAAqBC,cA8GZC,EA5GE,SAACvH,GAChB,IAAQC,EAAgB/C,cAAhB+C,YACR3D,EAAkCC,oBAAkB,GAAMG,EAAAC,YAAAL,EAAA,GAAnDkL,EAAS9K,EAAA,GAAE+K,EAAY/K,EAAA,GAC9BS,EAAwBZ,mBAAqB,IAAGa,EAAAT,YAAAQ,EAAA,GAAzCuK,EAAItK,EAAA,GAAEuK,EAAOvK,EAAA,GACdwK,EAAcnM,cAEdoM,EAAc7L,cACdX,EAAOC,cA+Fb,OA7FAuB,qBAAU,WACR,IAAMiL,EAAa,eAAA3H,EAAA3C,YAAAC,cAAAC,MAAG,SAAA0C,IAAA,IAAA2H,EAAAC,EAAAtF,EAAAuF,EAAAC,EAAAC,EAAAC,EAAA,OAAA3K,cAAAK,MAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,OAEA,OAFAF,EAAAC,KAAA,EAElByJ,GAAa,GAAK1J,EAAAE,KAAA,EAEQ4J,EAAY3J,QAAQ6J,cAAc5J,OAAM,OAGlE,IAHM4J,EAAWhK,EAAAK,KACX4J,EAAQ,GAELtF,EAAI,EAAGA,EAAIqF,EAAarF,IAC/BsF,EAAMK,KAAK,CACTjN,QAASiM,EACTiB,KAAM,QACNC,OAAQ,CAAC7F,KAEZ,OAAA3E,EAAAE,KAAA,EACmBuK,YAAUC,EAAgBT,GAAM,OAA9CC,EAAKlK,EAAAK,KAEL8J,EAAwB,GAAEC,EAAA1K,cAAAC,MAAA,SAAAyK,IAAA,IAAA/M,EAAA8C,EAAAwK,EAAAC,EAAAC,EAAA,OAAAnL,cAAAK,MAAA,SAAAyC,GAAA,cAAAA,EAAAvC,KAAAuC,EAAAtC,MAAA,OA4B7B,OAzBK7C,EAAU6M,EAAMvF,GAAG,GAYnBgG,GAVAxK,EAAU,CACd,SACA,UACA,eACA,YACA,SACA,iBACA,kBAGwBsE,KAAI,SAACqG,GAAM,MAAM,CACzCzN,UACAkN,KAAMO,EACNN,OAAQ,GACT,IAEGvI,IACF9B,EAAQmK,KAAK,YACbK,EAAUL,KAAK,CACbjN,UACAkN,KAAM,WACNC,OAAQ,CAACvI,MAEZO,EAAAvC,KAAA,EAAAuC,EAAAtC,KAAA,EAGuBuK,YAAUM,EAASJ,GAAU,OAmBiB,GAnB9DC,EAAOpI,EAAAnC,MAEPwK,EAAWF,EAAUK,QAAO,SAACC,EAAK7K,EAAM8K,GAU5C,MATkB,aAAd9K,EAAKmK,KACPU,EAAI7K,EAAKmK,MAAQ,CACfY,OAAQP,EAAQM,GAAO,GACvBE,QAASR,EAAQM,GAAO,IAG1BD,EAAI7K,EAAKmK,MAAQK,EAAQM,GAAO,GAG3BD,CACT,GAAG,CAAC,IAEKlN,GAAK4G,EAEdkG,EAASxN,QAAUA,EACnBwN,EAASQ,QAAUC,WAAWT,EAASQ,QAAQE,YAC/CV,EAASW,aAAeF,WAAWT,EAASW,aAAaD,aACrDtJ,EAAQ,CAADO,EAAAtC,KAAA,SAC8B,OAD9BsC,EAAAE,GACqBpC,IAASkC,EAAAtC,KAAA,GAAO2J,EAAY1J,QAAQsL,UAAUxJ,EAAS5E,GAAS+C,OAAM,QAAAoC,EAAAkJ,GAAAlJ,EAAAnC,KAApGwK,EAASc,eAAc,IAAAnJ,EAAAE,GAAAF,EAAAkJ,IAA+E1I,IACpG4I,IAAQC,IAAI3C,EAAStC,WAASpE,EAAAtC,KAAA,iBAGhC2K,EAASc,eAAiB,IAAIrL,IAAU,GAAE,QAG5C6J,EAAUG,KAAKO,GAASrI,EAAAtC,KAAA,iBAAAsC,EAAAvC,KAAA,GAAAuC,EAAAsJ,GAAAtJ,EAAA,SAExBG,QAAQC,MAAM,mBAAkBJ,EAAAsJ,IAAI,yBAAAtJ,EAAAjC,OAAA,GAAA6J,EAAA,kBA3D/BzF,EAAI,EAAE,KAAD,QAAEA,EAAIuF,EAAM1F,QAAM,CAAAxE,EAAAE,KAAA,gBAAAF,EAAA+L,cAAA3B,IAAA,iBAAEzF,IAAG3E,EAAAE,KAAA,iBA+DrC0J,EAAQO,GAAUnK,EAAAE,KAAA,iBAAAF,EAAAC,KAAA,GAAAD,EAAA0L,GAAA1L,EAAA,SAElB2C,QAAQC,MAAM,wBAAuB5C,EAAA0L,IAAI,QAEtB,OAFsB1L,EAAAC,KAAA,GAEzCyJ,GAAa,GAAM1J,EAAAgM,OAAA,6BAAAhM,EAAAO,OAAA,GAAA8B,EAAA,yBAEtB,kBAvFkB,OAAAD,EAAA5B,MAAA,KAAAC,UAAA,KAyFnBsJ,GACF,GAAG,CAACD,EAAaxM,EAAMuM,EAAa5H,EAASC,IAEtC,CACLuH,YACAE,OAEJ,E,kBChJasC,EAAU,SAACC,GAGtB,OAFaC,EAAOD,IAGV,CACN3B,KAAM,YACN6B,MAAO,2BAGb,EAEaC,EAAwB,SAACC,EAAgBC,GACpD,OAAOC,EAASD,GAASA,EAAQD,GAAW,IAAK,EACnD,EAIMG,EAAa,SAACjG,EAAkBI,GAAgB,OAAK0E,WAAWoB,sBAAYlG,EAAM+E,WAAY3E,GAAU,EAEjG+F,EAAuB,SAACC,EAAgBC,GACnD,IAAQjG,EAAaiG,EAAbjG,SACJkG,EAAkB,EAClBC,EAAiB,EACjBC,EAAgB,EAChBC,EAAiB,EACjB7B,GAAU,EAEVwB,EAAKM,WAIPD,EAhBqB,SAACF,EAAwBC,GAAqB,OAAKD,EAAiBC,CAAa,CAgBrFG,CAHjBJ,EAAiBN,EAAWG,EAAKG,eAAgBnG,GACjDoG,EAAgBP,EAAWG,EAAKM,SAAS/B,OAAQvE,IAIjDkG,EAAmBF,EAAKM,SAAS9B,QAA2B,EAAjB6B,EAC3C7B,EAAUwB,EAAKM,SAAS9B,SAG1B,IAAMkB,EAASG,EAAWG,EAAKN,OAAQ1F,GACjC2F,EAAQE,EAAWG,EAAKQ,cAAexG,GAK7C,MAAO,CACL0F,SACAC,QACAc,OAPaZ,EAAWG,EAAKS,OAAQzG,GAQrCqG,iBACAH,kBACAC,iBACAC,gBACA5B,UACAkC,mBAXyBjB,EAAsBC,EAAQC,GAa3D,EAEaC,EAAU,SAAChG,EAAO+G,GAC7B,IAAMC,EAAMC,KAAA5B,IAAG,GAAM0B,GACrB,OAAOE,KAAKC,MAAMlH,EAAQgH,GAAUA,CACtC,E,0DCvCeG,EAxBmC,SAAHvL,GAAmD,IAA7CkG,EAAOlG,EAAPkG,QAASnE,EAAQ/B,EAAR+B,SAAUyJ,EAAQxL,EAARwL,SAAazK,EAAK0K,YAAAzL,EAAA0L,GACxFvP,EAA8BC,oBAAkB,GAAMG,EAAAC,YAAAL,EAAA,GAA/CwP,EAAOpP,EAAA,GAAEqP,EAAUrP,EAAA,GACpBsP,EAAW,eAAAlJ,EAAAtF,YAAAC,cAAAC,MAAG,SAAA0C,EAAO6L,GAAK,OAAAxO,cAAAK,MAAA,SAAAyC,GAAA,cAAAA,EAAAvC,KAAAuC,EAAAtC,MAAA,OAEZ,OAFYsC,EAAAvC,KAAA,EAE5B+N,GAAW,GAAKxL,EAAAtC,KAAA,EACVoI,EAAQ4F,GAAM,OAAA1L,EAAAtC,KAAA,eAAAsC,EAAAvC,KAAA,EAAAuC,EAAAE,GAAAF,EAAA,SAEpBG,QAAQC,MAAKJ,EAAAE,IAAO,OAEH,OAFGF,EAAAvC,KAAA,EAEpB+N,GAAW,GAAMxL,EAAAwJ,OAAA,4BAAAxJ,EAAAjC,OAAA,GAAA8B,EAAA,uBAEpB,gBATgB8L,GAAA,OAAApJ,EAAAvE,MAAA,KAAAC,UAAA,KAUjB,OACEmE,eAACwD,IAAMvF,wBAAA,CAACyF,QAAS2F,EAAaL,SAAUA,GAAYG,GAAa5K,GAAK,IAAAgB,SAAA,CACnE4J,EACCnJ,eAAAC,WAAA,CAAAV,SAAA,CACER,cAACyK,IAAO,CAAChL,KAAM,KAAO,OAEtB,KACHe,KAGP,E,+CCTMkK,GAActL,IAAOC,IAAGC,MAAAC,YAAA,iHAQxBoL,GAAUvL,IAAOC,IAAGiB,MAAAf,YAAA,0EAMpBgG,GAAWC,IAAOC,IAqClBmF,GAAgB,SAAHjJ,GAAqB,IAAfgD,EAAOhD,EAAPgD,QACvB,OACE3E,cAACgK,EAAkB,CAACa,MAAM,OAAOlG,QAASA,EAAQnE,SAAC,WAIvD,EAqFesK,GA5EmC,SAAH/I,GAAoD,IAA9CU,EAAGV,EAAHU,IAAKsI,EAAShJ,EAATgJ,UAAWC,EAASjJ,EAATiJ,UAAWC,EAAWlJ,EAAXkJ,YAC9EhO,EAAsBpC,mBAAS,IAAGsC,EAAAlC,YAAAgC,EAAA,GAA3BiO,EAAG/N,EAAA,GAAEgO,EAAMhO,EAAA,GAClBiO,EAAkCvQ,oBAAS,GAAMwQ,EAAApQ,YAAAmQ,EAAA,GAA1CE,EAASD,EAAA,GAAEE,EAAYF,EAAA,GACtBnI,EAAMC,eAAND,EACFsI,EAAc3R,mBAAQ,WAC1B,OAAO4R,aAAsBhJ,EAC/B,GAAG,CAACA,IAEEiJ,EAAY,IAAI/O,IAAUuO,GAAO,GACjCS,EAAoB,IAAIhP,IAAU6O,GAElCI,EAAeC,uBACnB,SAACC,GACKA,EAAEC,cAAcC,SAASC,OAC3Bd,EAAOW,EAAEC,cAAclJ,MAAMqJ,QAAQ,KAAM,KAE/C,GACA,CAACf,IAGGgB,EAAkBN,uBAAY,WAClCV,EAAOK,EACT,GAAG,CAACA,EAAaL,IAEjBiB,EA1EiB,SAACnB,GAClB,IAAQ3M,EAAY7D,cAAZ6D,QACF4H,EAAcnM,cACpBa,EAAgDC,oBAAkB,GAAMG,EAAAC,YAAAL,EAAA,GAAjEyR,EAAgBrR,EAAA,GAAEsR,EAAmBtR,EAAA,GAC5CS,EAAkCZ,mBAAoB,IAAI8B,IAAU,MAAKjB,EAAAT,YAAAQ,EAAA,GAAlEqM,EAASpM,EAAA,GAAE6Q,EAAY7Q,EAAA,GAExB8Q,EAAeX,sBAAW/P,YAAAC,cAAAC,MAAC,SAAA0C,IAAA,IAAA+N,EAAA,OAAA1Q,cAAAK,MAAA,SAAAyC,GAAA,cAAAA,EAAAvC,KAAAuC,EAAAtC,MAAA,OAGK,OAHLsC,EAAAvC,KAAA,EAE7BgQ,GAAoB,GAAKzN,EAAAE,GACApC,IAASkC,EAAAtC,KAAA,EAAO2J,EAAY1J,QAAQsL,UAAUxJ,EAAS2M,GAAaxO,OAAM,OAAAoC,EAAAkJ,GAAAlJ,EAAAnC,KAA7F+P,EAAY,IAAA5N,EAAAE,GAAAF,EAAAkJ,IAClBwE,EAAaE,EAAaC,UAAUzE,IAAQC,IAAI3C,GAAStC,YAAWpE,EAAAtC,KAAA,iBAAAsC,EAAAvC,KAAA,GAAAuC,EAAAsJ,GAAAtJ,EAAA,SAEpEG,QAAQC,MAAKJ,EAAAsJ,IAAG,QAEU,OAFVtJ,EAAAvC,KAAA,GAEhBgQ,GAAoB,GAAMzN,EAAAwJ,OAAA,6BAAAxJ,EAAAjC,OAAA,GAAA8B,EAAA,yBAE3B,CAACwH,EAAa5H,EAAS2M,IAEpB0B,EAAgBd,sBAAW/P,YAAAC,cAAAC,MAAC,SAAAC,IAAA,IAAA2Q,EAAA,OAAA7Q,cAAAK,MAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,cAAAF,EAAAC,KAAA,EAAAD,EAAAE,KAAA,EAEb2J,EAAY1J,QAAQqQ,QAAQ5B,EAAa6B,IAAOC,UAAUC,YAAYC,KAAK,CAAEC,KAAM5O,IAAU,OAAtG,OAAFsO,EAAEvQ,EAAAK,KAAAL,EAAAE,KAAA,EACFiQ,IAAc,cAAAnQ,EAAA8Q,OAAA,SACbP,GAAE,cAAAvQ,EAAAC,KAAA,EAAAD,EAAA0C,GAAA1C,EAAA,SAAAA,EAAA8Q,OAAA,UAEF,GAAK,yBAAA9Q,EAAAO,OAAA,GAAAX,EAAA,kBAEb,CAACqC,EAAS4H,EAAa+E,EAAauB,IAMvC,OAJArR,qBAAU,WACRqR,GACF,GAAG,CAAClO,EAASkO,EAAcvB,IAEpB,CAAEmC,UAAWT,EAAe7E,YAAWuE,mBAChD,CAyCmCgB,CAAWpC,GAApCmC,EAAShB,EAATgB,UAEFE,EAFsBlB,EAATtE,UAEUyF,uBAAuB7B,GAEpD,OACEzK,eAACuM,IAAK,CAACC,MAAOvK,EAAE,6BAA8BwK,UAAU,mBAAmB1C,UAAWA,EAAUxK,SAAA,CAC9FR,cAACuC,KAAU,CACTM,MAAOqI,EACPtI,YAAauJ,EACbxJ,SAAUiJ,EACVnJ,IAAK+I,EACL9I,OAAQ6C,GAAS7C,OACjBK,WAAYG,EAAE,SACdD,SAAUsC,GAAStC,WAErBjD,cAAC0K,GAAW,CAAAlK,SACVS,eAAA,MAAAT,SAAA,CACER,cAAA,MAAAQ,SAAI,wFACJR,cAAA,MAAAQ,SAAI,wEACJR,cAAA,MAAAQ,SAAI,kEACJR,cAAA,MAAAQ,SAAI,8GAGJR,cAAA,MAAAQ,SAAI,yEAGRR,cAAC2K,GAAO,CAAAnK,SAAC,uCACTS,eAACV,KAAY,CAAAC,SAAA,CACXR,cAACyE,IAAM,CAACkJ,QAAQ,YAAYhJ,QAASqG,EAAWH,MAAM,OAAOZ,SAAUqB,EAAU9K,SAC9E0C,EAAE,YAEJoK,EACCtN,cAACyE,IAAM,CACLoG,MAAM,OACNZ,SAAUqB,IAAcI,EAAUkC,YAAclC,EAAUmC,GAAG,IAAMnC,EAAU9H,GAAG+H,GAChFhH,QAAO7I,YAAAC,cAAAC,MAAE,SAAAuB,IAAA,OAAAxB,cAAAK,MAAA,SAAAsB,GAAA,cAAAA,EAAApB,KAAAoB,EAAAnB,MAAA,OACW,OAAlBgP,GAAa,GAAK7N,EAAAnB,KAAA,EACZwO,EAAUG,GAAI,OACpBK,GAAa,GACbP,IAAW,wBAAAtN,EAAAd,OAAA,GAAAW,EAAA,KACXiD,SAEW0C,EAAZoI,EAAc,uBAA4B,aAG7CtL,cAAC4K,GAAa,CAACjG,QAASyI,SAKlC,ECrHeU,I,OA5B+B,SAAHrP,GAAkB,IAAZwK,EAAIxK,EAAJwK,KACvC3K,EAAY7D,cAAZ6D,QACR1D,EAA8BC,oBAAkB,GAAMG,EAAAC,YAAAL,EAAA,GAAtCmT,GAAF/S,EAAA,GAAYA,EAAA,IAEpBmL,EAAc7L,cACd0T,EAAiB/E,EAAKvB,QAAUuG,KAAKC,MAAQ,IAC7CC,EAAYH,GAAkB/E,EAAKmF,YAAc1I,EAAU2I,YAEjElT,qBAAU,WACR,IAAMmT,EAAY,eAAAlN,EAAAtF,YAAAC,cAAAC,MAAG,SAAA0C,IAAA,IAAA6P,EAAA,OAAAxS,cAAAK,MAAA,SAAAyC,GAAA,cAAAA,EAAAvC,KAAAuC,EAAAtC,MAAA,cAAAsC,EAAAtC,KAAA,EACC4J,EAAY3J,QAAQ+R,QAAQ9R,OAAM,QAAhD8R,EAAK1P,EAAAnC,OACE4B,GACXyP,EAAWQ,EAAMC,gBAAkBlQ,EAAQkQ,eAC5C,wBAAA3P,EAAAjC,OAAA,GAAA8B,EAAA,KACF,kBALiB,OAAA0C,EAAAvE,MAAA,KAAAC,UAAA,KAOlBwR,GACF,GAAG,CAAChQ,EAAS6H,IAEb,IAAMsI,EAAQ,eAAA9M,EAAA7F,YAAAC,cAAAC,MAAG,SAAAC,IAAA,OAAAF,cAAAK,MAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,WACXyR,EAAe,CAAD3R,EAAAE,KAAA,eAAAF,EAAAE,KAAA,EACV4J,EAAY3J,QAAQkS,WAAWzF,EAAK7O,IAAI6S,KAAK,CAAEC,KAAM5O,IAAU,wBAAAjC,EAAAO,OAAA,GAAAX,EAAA,KAExE,kBAJa,OAAA0F,EAAA9E,MAAA,KAAAC,UAAA,KAMd,OAAOkD,cAAAkB,WAAA,CAAAV,SAAG2N,GAAanO,cAACgK,EAAkB,CAACrF,QAAS8J,EAASjO,SAAC,YAChE,GCZMmO,GAAK,eAAAlQ,EAAA3C,YAAAC,cAAAC,MAAG,SAAA0C,EAAOkQ,EAAcpH,EAAQlJ,GAAO,OAAAvC,cAAAK,MAAA,SAAAyC,GAAA,cAAAA,EAAAvC,KAAAuC,EAAAtC,MAAA,cAAAsC,EAAAsO,OAAA,SACzCyB,EAAapS,QAAQmS,MAAM,IAAIhS,IAAU6K,GAAQqH,MAAM5G,IAAQC,IAAI,KAAKN,YAAYqF,KAAK,CAAEC,KAAM5O,KAAU,wBAAAO,EAAAjC,OAAA,GAAA8B,EAAA,KACnH,gBAFU8L,EAAAsE,EAAAC,GAAA,OAAAtQ,EAAA5B,MAAA,KAAAC,UAAA,KAILkS,GAAkB5P,IAAO6P,KAAI3P,MAAAC,YAAA,oDAoB7BgG,GAAWC,IAAOC,IAElByJ,GAAqD,SAAHvN,GAAuB,IAAjByM,EAASzM,EAATyM,UACxD9I,EAAQ,GACN6J,EAAa,CAAC,oBAAqB,oBAErCf,IAAc1I,EAAU2I,aAC1B/I,EAAQ,cACR6J,EAAWxI,KAAK,kCACPyH,IAAc1I,EAAU0J,UACjC9J,EAAQ,gDACR6J,EAAWxI,KAAK,8BACPyH,IAAc1I,EAAU2J,KACjC/J,EAAQ,UACR6J,EAAWxI,KAAK,0BACPyH,IAAc1I,EAAU4J,OACjChK,EAAQ,SACR6J,EAAWxI,KAAK,2BAGlB,IAAM+G,EAAYyB,EAAWI,KAAK,KAElC,OACEvP,cAAA,OAAK0N,UAAWA,EAAUlN,SACxBR,cAAA,QAAAQ,SAAO8E,KAGb,EAQMkK,GAA4C,SAAHzN,GAAA,IAAM0L,EAAK1L,EAAL0L,MAAOhF,EAAK1G,EAAL0G,MAAOgH,EAAE1N,EAAF0N,GAAE,OACnExO,eAAA,OAAKyM,UAAU,wBAAuBlN,SAAA,CACpCR,cAAA,OAAK0N,UAAU,8BAA6BlN,SAC1CR,cAAA,OAAK0N,UAAU,uBAAuBgC,IAAKjC,EAAOkC,IAAKlH,MAEzDzI,cAAA,OAAK0N,UAAU,6BAA4BlN,SAAEiN,IAC7CxM,eAAA,OAAKyM,UAAU,2BAA0BlN,SAAA,CAAEsJ,KAAKC,MAAM0F,GAAI,WACtD,EASFG,GAA4C,SAAH1N,GAAmC,IAA7BoD,EAAKpD,EAALoD,MAAOuK,EAAO3N,EAAP2N,QAAShN,EAAKX,EAALW,MACnEiN,EAA+CC,YAAWF,EAAS,CAAEG,UAAW,OAAQC,cAAe,CAAC,GAAI,MAApGC,EAASJ,EAATI,UAAWC,EAAOL,EAAPK,QAASC,EAAcN,EAAdM,eAC5B,OACEnP,eAAA,OAAKyM,UAAU,iBAAgBlN,SAAA,CAC7BS,eAAA,OAAKyM,UAAU,wBAAuBlN,SAAA,CACnC8E,EACDtF,cAAA,OAAKqQ,IAAKH,EAAU1P,SAClBR,cAACsQ,IAAQ,CAACzL,MAAM,iBAEjBuL,GAAkBD,KAErBnQ,cAAA,OAAK0N,UAAU,wBAAuBlN,SAAEqC,MAG9C,EAEM0N,GAAqD,SAAH/N,GAAmB,IAAbgO,EAAKhO,EAALgO,MAC5D,OACExQ,cAAA,OAAK0N,UAAU,YAAWlN,SACvBgQ,EAAM1P,KAAI,SAAC2P,EAAMlJ,GAAK,OACrBvH,cAAC4P,GAAY,CAAatK,MAAOmL,EAAKnL,MAAOzC,MAAO4N,EAAK5N,MAAOgN,QAASY,EAAKZ,SAA3DtI,EAAsE,KAIjG,EAOMmJ,GAA0C,SAAHC,GAA2B,IAArBC,EAAKD,EAALC,MAAOjI,EAAMgI,EAANhI,OAClDkI,EAAUhX,mBAAQ,kBAAM+W,EAAQjI,CAAM,GAAE,CAACiI,EAAOjI,IAChDmI,EAAYjX,mBAAQ,oBAAAuK,OAAUuE,EAASkI,EAAW,IAAG,OAAK,CAAClI,EAAQkI,IACnEE,EAAWlX,mBAAQ,oBAAAuK,OAAUwM,EAAQC,EAAW,IAAG,OAAK,CAACD,EAAOC,IACtE,OACE7Q,cAAA,OAAK0N,UAAU,eAAclN,SAC3BS,eAAA,OAAKyM,UAAU,qBAAoBlN,SAAA,CACjCR,cAAA,OAAK0N,UAAU,uCAAuCrK,MAAO,CAAEwH,MAAOiG,KACtE9Q,cAAA,OAAK0N,UAAU,sCAAsCrK,MAAO,CAAEwH,MAAOkG,SAI7E,EA2GeC,GArG+B,SAAHC,GAAkB,IAAZhI,EAAIgI,EAAJhI,KAC/CiI,EApHe,WACf,IAAQ5S,EAAY7D,cAAZ6D,QACF3E,EAAOC,cACPuX,EAActF,sBAAW,eAAAzK,EAAAtF,YAAAC,cAAAC,MAC7B,SAAAC,EAAOgP,EAAazD,GAAM,IAAAoH,EAAA,OAAA7S,cAAAK,MAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,OAC+B,OAAjDqS,EAAewC,YAAgBnG,EAAatR,GAAK0C,EAAAE,KAAA,EACjDoS,GAAMC,EAAcpH,EAAQlJ,GAAQ,wBAAAjC,EAAAO,OAAA,GAAAX,EAAA,KAC3C,gBAAAoV,EAAAC,GAAA,OAAAlQ,EAAAvE,MAAA,KAAAC,UAAA,EAJ4B,GAK7B,CAACnD,EAAM2E,IAET,MAAO,CACLiT,QAASJ,EAEb,CAuGsBK,GAAZD,EAAOL,EAAPK,QAEArT,EAAYL,YAAgB0H,GAAS7L,QAAQ+X,MAA7CvT,QACFwT,EAAe,IAAI/U,IAAUuB,GAAS2Q,MAAM,IAAIlS,IAAU,IAAIuL,IAAI,GAAK3C,GAAStC,WAEhFkO,EAAW,eAAAQ,EAAA7V,YAAAC,cAAAC,MAAG,SAAAuB,EAAOiK,GAAM,OAAAzL,cAAAK,MAAA,SAAAsB,GAAA,cAAAA,EAAApB,KAAAoB,EAAAnB,MAAA,cAAAmB,EAAAnB,KAAA,EACzBgV,EAAQtI,EAAKvP,QAAS8N,GAAO,wBAAA9J,EAAAd,OAAA,GAAAW,EAAA,KACpC,gBAFgBqU,GAAA,OAAAD,EAAA9U,MAAA,KAAAC,UAAA,KAIjB+U,EAAiEhY,mBAC/D,kBAAMmP,EAAqBC,EAAM1D,GAAS,GAC1C,CAAC0D,IAFKN,EAAMkJ,EAANlJ,OAAQC,EAAKiJ,EAALjJ,MAAOc,EAAMmI,EAANnI,OAAwBL,GAAFwI,EAAdvI,eAA6BuI,EAAbxI,eAIzCyI,EAAOjY,mBAAQ,kBAAMyO,EAAQW,EAAK7O,GAAG,GAAE,CAAC6O,EAAK7O,KAE7C2X,EADe9I,EAAKmF,YAAc1I,EAAU2I,aACjBpF,EAAKvB,QAAUuG,KAAKC,MAAQ,IAE7D8D,EAAgCC,YAC9BjS,cAAC8K,GAAY,CAACrI,IAAKiP,EAAc3G,UAAWoG,EAAalG,YAAahC,EAAKvP,WADtEwY,EAENjX,YAAA+W,EAAA,GAF2B,GAgCtBrI,EAAqB9P,mBAAQ,kBAAM6O,EAAsBC,EAAQC,EAAM,GAAE,CAACA,EAAOD,IAEjFwJ,EAAYtY,mBAAQ,WACxB,MAAO,CACL,CACEyL,MAAO,gBACPzC,MAAM,GAADuB,OAAKuF,EAAkB,KAC5BkG,QACE,kNAEJ,CACEvK,MAAO,qBACPzC,MAAM,GAADuB,OAAKyE,EAAQa,EAAQ,GAAE,QAC5BmG,QACE,iLAEJ,CACEvK,MAAO,aACPzC,MAAM,GAADuB,OAAKyE,EAAQQ,EAAe,GAAE,QACnCwG,QACE,sKAGR,GAAG,CAAClG,EAAoBD,EAAQL,IAEhC,OACEpI,eAAA,OAAKyM,UAAU,cAAalN,SAAA,CAE1BS,eAAA,OAAKyM,UAAU,qBAAoBlN,SAAA,CACjCR,cAACwP,GAAY,CAAC/B,MAAOqE,EAAKlL,KAAM6B,MAAOqJ,EAAKrJ,MAAOgH,GAAI9G,IACvD3I,cAAA,OAAK0N,UAAU,kBAAiBlN,SAAC,OACjCR,cAACwP,GAAY,CAAC/B,MAAM,mBAAmBhF,MAAM,yBAAyBgH,GAAI7G,OAE5E5I,cAAC0Q,GAAW,CAAC/H,OAAQA,EAAQiI,MAAOhI,IACpC5I,cAACuQ,GAAQ,CAACC,MAAO2B,IACjBnS,cAAA,OAAK0N,UAAU,yBAAwBlN,SACrCR,cAACoS,IAAS,CAACC,KAAqB,IAAfpJ,EAAKvB,QAAgB4K,SAhEpB,SAACC,GACvB,IAAQC,EAAyBD,EAAzBC,UAAWC,EAAcF,EAAdE,UACXC,EAAkCD,EAAlCC,KAAMC,EAA4BF,EAA5BE,MAAOC,EAAqBH,EAArBG,QAASC,EAAYJ,EAAZI,QAC9B,OAAIL,EAEKxS,cAACkP,GAAc,CAACd,UAAWnF,EAAKmF,YAIvCpO,cAAA,OAAAQ,SACES,eAAA,OAAAT,SAAA,CAAK,aAEFkS,EAAO,GACNzR,eAAAC,WAAA,CAAAV,SAAA,CACER,cAACgP,GAAe,CAAAxO,SAAEkS,IAAuB,WAE1C,IACFC,EAAQ,GACP1R,eAAAC,WAAA,CAAAV,SAAA,CACER,cAACgP,GAAe,CAAAxO,SAAEmS,IAAwB,YAE3C,IACH3S,cAACgP,GAAe,CAAAxO,SAAEoS,IAA0B,YAAS5S,cAACgP,GAAe,CAAAxO,SAAEqS,IAA0B,eAIzG,MAwCI5R,eAAA,OAAKyM,UAAU,mBAAkBlN,SAAA,CAC9BuR,GACC/R,cAACgK,EAAkB,CAACtF,MAAM,KAAKC,QAASuN,EAAsB1R,SAAC,eAKjER,cAAC8N,GAAU,CAAC7E,KAAMA,SAI1B,E,mBC5OM6J,I,OAAW1T,IAAO2T,GAAEzT,MAAAC,YAAA,mPAkBpByT,GAAY5T,IAAOC,IAAGiB,MAAAf,YAAA,kHA4BtBgG,GAAWC,IAAOC,IAkETwN,GAhEyB,SAAH7R,GAAkB,IAAZ6H,EAAI7H,EAAJ6H,KACnC6I,EAAOjY,mBAAQ,kBAAMyO,EAAQW,EAAK7O,GAAG,GAAE,CAAC6O,EAAK7O,KACnDyX,EAAgFhY,mBAC9E,kBAAMmP,EAAqBC,EAAM1D,GAAS,GAC1C,CAAC0D,IAFKN,EAAMkJ,EAANlJ,OAAQe,EAAMmI,EAANnI,OAAQP,EAAe0I,EAAf1I,gBAAiBG,EAAcuI,EAAdvI,eAAgBK,EAAkBkI,EAAlBlI,mBAIzDuJ,EA5Be,WACf,IAAQ5U,EAAY7D,cAAZ6D,QACF3E,EAAOC,cACPuZ,EAActH,sBAAW,eAAApN,EAAA3C,YAAAC,cAAAC,MAC7B,SAAA0C,EAAOuM,GAAW,IAAA2D,EAAA,OAAA7S,cAAAK,MAAA,SAAAyC,GAAA,cAAAA,EAAAvC,KAAAuC,EAAAtC,MAAA,OACuC,OAAjDqS,EAAewC,YAAgBnG,EAAatR,GAAKkF,EAAAtC,KAAA,EACjDqS,EAAapS,QAAQ4W,eAAenG,KAAK,CAAEC,KAAM5O,IAAU,wBAAAO,EAAAjC,OAAA,GAAA8B,EAAA,KAClE,gBAAA8L,GAAA,OAAA/L,EAAA5B,MAAA,KAAAC,UAAA,EAJ4B,GAK7B,CAACnD,EAAM2E,IAGT,MAAO,CACL+U,QAASF,EAEb,CAcsBG,GAAZD,EAAOH,EAAPG,QAEFF,EAAW,eAAAxR,EAAA7F,YAAAC,cAAAC,MAAG,SAAAC,IAAA,OAAAF,cAAAK,MAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,cAAAF,EAAAE,KAAA,EACZ8W,EAAQpK,EAAKvP,SAAQ,wBAAA2C,EAAAO,OAAA,GAAAX,EAAA,KAC5B,kBAFgB,OAAA0F,EAAA9E,MAAA,KAAAC,UAAA,KAIjB,OACEmE,eAAC6R,GAAQ,CAACpF,UAAU,WAAUlN,SAAA,CAC5BR,cAAA,MAAI0N,UAAU,iBAAgBlN,SAC5BR,cAACgT,GAAS,CAAAxS,SACRS,eAAA,OAAKyM,UAAU,oBAAmBlN,SAAA,CAChCR,cAAA,OAAK2P,IAAKmC,EAAKrJ,MAAOiH,IAAKoC,EAAKlL,OAChC5G,cAAA,OAAAQ,SAAMsR,EAAKlL,cAIjB5G,cAAA,MAAI0N,UAAU,iBAAgBlN,SAC5BR,cAACgT,GAAS,CAAAxS,SACPyI,EAAKmF,YAAc1I,EAAU2J,IAC5BrP,cAAA,OAAK0N,UAAU,6BAA4BlN,SAAC,YAE5CR,cAAA,OAAK0N,UAAU,8BAA6BlN,SAAC,eAInDR,cAAA,MAAI0N,UAAU,iBAAgBlN,SAC5BR,cAACgT,GAAS,CAAAxS,SACRS,eAACmE,KAAU,CAACE,MAAM,eAAc9E,SAAA,CAAEqI,EAAQa,EAAQ,GAAG,cAGzD1J,cAAA,MAAI0N,UAAU,iBAAgBlN,SAC5BR,cAACgT,GAAS,CAAAxS,SACRS,eAACmE,KAAU,CAACE,MAAM,UAAS9E,SAAA,CAAEqI,EAAQF,EAAQ,GAAG,aAGpD3I,cAAA,MAAI0N,UAAU,iBAAgBlN,SAC5BR,cAACgT,GAAS,CAAAxS,SACRS,eAACmE,KAAU,CAACE,MAAM,UAAS9E,SAAA,CAAEqI,EAAQc,EAAoB,GAAG,WAGhE3J,cAAA,MAAI0N,UAAU,iBAAgBlN,SAC5BR,cAACgT,GAAS,CAAAxS,SACRS,eAACmE,KAAU,CAACE,MAAM,cAAa9E,SAAA,CAAEqI,EAAQS,EAAgB,GAAG,cAGhEtJ,cAAA,MAAI0N,UAAU,iBAAgBlN,SAC5BR,cAACgT,GAAS,CAAAxS,SACP2I,EAAkB,EACjBnJ,cAACgK,EAAkB,CAACtF,MAAM,KAAKC,QAASwO,EAAY3S,SAAC,UAGnD,WAKd,ECjHM+S,GAAenU,IAAOC,IAAGC,MAAAC,YAAA,qFAQzBiU,GAAcpU,IAAOqU,MAAKnT,MAAAf,YAAA,gJAS1BmU,GAAYtU,IAAOuU,MAAKrR,MAAA/C,YAAA,iGASxBqU,GAAiBxU,IAAOC,IAAGwU,MAAAtU,YAAA,iCAI3BuU,GAAwB1U,IAAOC,IAAG0U,MAAAxU,YAAA,qGA0CzByU,GA/B+B,SAAHvV,GAAmB,IAAb8H,EAAK9H,EAAL8H,MACvCrD,EAAMC,eAAND,EAEF+Q,EAAiBtZ,iBAAuB,MAO9C,OACEsG,eAAC2S,GAAc,CAAApT,SAAA,CACbR,cAACuT,GAAY,CAAClD,IAAK4D,EAAezT,SAChCR,cAACwT,GAAW,CAAAhT,SACVR,cAAC0T,GAAS,CAAAlT,SACP+F,EAAMzF,KAAI,SAACmI,GAAI,OACdjJ,cAACiT,GAAO,CAAChK,KAAMA,GAAK,YAAA7E,OAAkB6E,EAAK7O,IAAQ,UAK3D4F,cAAC8T,GAAqB,CAAAtT,SACpBS,eAACwD,IAAM,CAACkJ,QAAQ,OAAOhJ,QAjBT,WAClBsP,EAAe7Y,QAAQ8Y,eAAe,CACpCC,SAAU,UAEd,EAakD3T,SAAA,CAC1CR,cAACoU,IAAa,CAACvJ,MAAM,OAAOhG,MAAM,YACjC3B,EAAE,sBAKb,ECfemR,GAjDF,WACX,IAAQ/V,EAAY7D,cAAZ6D,QACRgW,EAA4BzO,EAASvH,GAA7B0H,EAAIsO,EAAJtO,KAAMF,EAASwO,EAATxO,UACd+L,EAAuChY,mBAAQ,WAC7C,IAAM0a,EAAS,GACTC,EAAW,GAWjB,OATAxO,EAAKyO,SAAQ,SAACxL,IACM,CAACvD,EAAU4J,KAAM5J,EAAU2J,KAAKqF,SAASzL,EAAKmF,WAE9DmG,EAAO5N,KAAKsC,GAEZuL,EAAS7N,KAAKsC,EAElB,IAEO,CACL0L,YAAaJ,EAAOK,MAAK,SAACC,EAAGC,GAAC,OAAKA,EAAE1a,GAAKya,EAAEza,EAAE,IAC9C2a,cAAeP,EAASI,MAAK,SAACC,EAAGC,GAAC,OAAKA,EAAE1a,GAAKya,EAAEza,EAAE,IAEtD,GAAG,CAAC4L,IAjBI2O,EAAW9C,EAAX8C,YAAaI,EAAalD,EAAbkD,cAkBf3K,EAAUtE,IAAcE,EAAKnF,OACnC,OACEb,cAACgV,IAAI,CAAAxU,SACF4J,EACCpK,cAAA,OAAK0N,UAAU,gBAAelN,SAC5BR,cAACyK,IAAO,MAGVxJ,eAAAC,WAAA,CAAAV,SAAA,CACES,eAAA,OAAKyM,UAAU,QAAOlN,SAAA,CACpBS,eAAA,OAAKyM,UAAU,cAAalN,SAAA,CAC1BR,cAAA,OAAK0N,UAAU,aAAYlN,SAAC,eAC5BR,cAAA,OAAK0N,UAAU,qBAAoBlN,SAAC,8BAErCmU,EAAY7T,KAAI,SAACmI,GAAI,OACpBjJ,cAACgR,GAAU,CAAoB/H,KAAMA,GAApBA,EAAKvP,QAAuB,OAGjDuH,eAAA,OAAKyM,UAAU,iBAAgBlN,SAAA,CAC7BR,cAAA,OAAK0N,UAAU,uBAAsBlN,SAAC,mBACtCR,cAACgU,GAAU,CAACzN,MAAOwO,WAM/B,C","file":"static/js/8.a46c6e3a.chunk.js","sourcesContent":["import { useMemo } from 'react'\nimport useWeb3 from 'hooks/useWeb3'\nimport {\n  getBep20Contract,\n  getDIBContract,\n  getMasterchefContract,\n  getSouschefContract,\n  getErc721Contract,\n  getSouschefV2Contract,\n  getReferralsContract,\n  getGameContract,\n  getGameFactoryContract,\n} from 'utils/contractHelpers'\n\n/**\n * Helper hooks to get specific contracts (by ABI)\n */\n\nexport const useERC20 = (address: string) => {\n  const web3 = useWeb3()\n  return useMemo(() => getBep20Contract(address, web3), [address, web3])\n}\n\n/**\n * @see https://docs.openzeppelin.com/contracts/3.x/api/token/erc721\n */\nexport const useERC721 = (address: string) => {\n  const web3 = useWeb3()\n  return useMemo(() => getErc721Contract(address, web3), [address, web3])\n}\n\nexport const useDIB = () => {\n  const web3 = useWeb3()\n  return useMemo(() => getDIBContract(web3), [web3])\n}\n\nexport const useMasterchef = () => {\n  const web3 = useWeb3()\n  return useMemo(() => getMasterchefContract(web3), [web3])\n}\n\nexport const useSousChef = (id) => {\n  const web3 = useWeb3()\n  return useMemo(() => getSouschefContract(id, web3), [id, web3])\n}\n\nexport const useSousChefV2 = (id) => {\n  const web3 = useWeb3()\n  return useMemo(() => getSouschefV2Contract(id, web3), [id, web3])\n}\n\nexport const useReferrals = () => {\n  const web3 = useWeb3()\n  return useMemo(() => getReferralsContract(web3), [web3])\n}\n\nexport const useGameFactory = () => {\n  const web3 = useWeb3()\n  return useMemo(() => getGameFactoryContract(web3), [web3])\n}\n\nexport const useGame = (gameAddress: string) => {\n  const web3 = useWeb3()\n  return useMemo(() => getGameContract(gameAddress, web3), [gameAddress, web3])\n}\n","import { useEffect, useState, useRef } from 'react'\nimport Web3 from 'web3'\nimport { useWeb3React } from '@web3-react/core'\nimport web3NoAccount from 'utils/web3'\n\n/**\n * Provides a web3 instance using the provider provided by useWallet\n * with a fallback of an httpProver\n * Recreate web3 instance only if the provider change\n */\nconst useWeb3 = () => {\n  const { library } = useWeb3React()\n  const refEth = useRef(library)\n  const [web3, setweb3] = useState(library ? new Web3(library) : web3NoAccount)\n\n  useEffect(() => {\n    if (library !== refEth.current) {\n      setweb3(library ? new Web3(library) : web3NoAccount)\n      refEth.current = library\n    }\n  }, [library])\n\n  return web3\n}\n\nexport default useWeb3\n","import { useEffect, useState } from 'react'\nimport BigNumber from 'bignumber.js'\nimport { useWeb3React } from '@web3-react/core'\nimport { getBep20Contract, getDIBContract, getMasterchefContract } from 'utils/contractHelpers'\nimport { BIG_ZERO } from 'utils/bigNumber'\nimport useWeb3 from './useWeb3'\nimport useRefresh from './useRefresh'\nimport useLastUpdated from './useLastUpdated'\n\ntype UseTokenBalanceState = {\n  balance: BigNumber\n  fetchStatus: FetchStatus\n}\n\nexport enum FetchStatus {\n  NOT_FETCHED = 'not-fetched',\n  SUCCESS = 'success',\n  FAILED = 'failed',\n}\n\nconst useTokenBalance = (tokenAddress: string) => {\n  const { NOT_FETCHED, SUCCESS, FAILED } = FetchStatus\n  const [balanceState, setBalanceState] = useState<UseTokenBalanceState>({\n    balance: BIG_ZERO,\n    fetchStatus: NOT_FETCHED,\n  })\n  const { account } = useWeb3React()\n  const { fastRefresh } = useRefresh()\n\n  useEffect(() => {\n    const fetchBalance = async () => {\n      const contract = getBep20Contract(tokenAddress)\n      try {\n        const res = await contract.methods.balanceOf(account).call()\n        setBalanceState({ balance: new BigNumber(res), fetchStatus: SUCCESS })\n      } catch (e) {\n        console.error(e)\n        setBalanceState((prev) => ({\n          ...prev,\n          fetchStatus: FAILED,\n        }))\n      }\n    }\n\n    if (account) {\n      fetchBalance()\n    }\n  }, [account, tokenAddress, fastRefresh, SUCCESS, FAILED])\n\n  return balanceState\n}\n\nexport const useTotalSupply = () => {\n  const { slowRefresh } = useRefresh()\n  const [totalSupply, setTotalSupply] = useState<BigNumber>()\n\n  useEffect(() => {\n    async function fetchTotalSupply() {\n      const cakeContract = getDIBContract()\n      const supply = await cakeContract.methods.totalSupply().call()\n      setTotalSupply(new BigNumber(supply))\n    }\n\n    fetchTotalSupply()\n  }, [slowRefresh])\n\n  return totalSupply\n}\n\nexport const useDIBPerSecond = () => {\n  const { slowRefresh } = useRefresh()\n  const [dibPerSecond, setDibPerSecond] = useState<BigNumber>(BIG_ZERO)\n\n  useEffect(() => {\n    async function fetchDibPerSecond() {\n      const masterChefContract = getMasterchefContract()\n      const perSecond = await masterChefContract.methods.lfgPerSecond().call()\n      // console.log(\"perSecond\", perSecond);\n      setDibPerSecond(new BigNumber(perSecond))\n    }\n\n    fetchDibPerSecond()\n  }, [slowRefresh])\n\n  return dibPerSecond\n}\n\nexport const useBurnedBalance = (tokenAddress: string) => {\n  const [balance, setBalance] = useState(BIG_ZERO)\n  const { slowRefresh } = useRefresh()\n\n  useEffect(() => {\n    const fetchBalance = async () => {\n      const contract = getBep20Contract(tokenAddress)\n      const res = await contract.methods.balanceOf('0x0000000000000000000000000000000000000000dEaD').call()\n      setBalance(new BigNumber(res))\n    }\n\n    fetchBalance()\n  }, [tokenAddress, slowRefresh])\n\n  return balance\n}\n\nexport const useDIBBurnedBalance = () => {\n  const [balance, setBalance] = useState(BIG_ZERO)\n  const { slowRefresh } = useRefresh()\n\n  useEffect(() => {\n    const fetchBalance = async () => {\n      const contract = getDIBContract()\n      const res = await contract.methods.totalFees().call()\n      setBalance(new BigNumber(res).div(new BigNumber(3))) // 1/3 of total fees are burning\n    }\n\n    fetchBalance()\n  }, [slowRefresh])\n\n  return balance\n}\n\nexport const useGetBnbBalance = () => {\n  const [balance, setBalance] = useState(BIG_ZERO)\n  const { account } = useWeb3React()\n  const { lastUpdated, setLastUpdated } = useLastUpdated()\n  const web3 = useWeb3()\n\n  useEffect(() => {\n    const fetchBalance = async () => {\n      const walletBalance = await web3.eth.getBalance(account)\n      setBalance(new BigNumber(walletBalance))\n    }\n\n    if (account) {\n      fetchBalance()\n    }\n  }, [account, web3, lastUpdated, setBalance])\n\n  return { balance, refresh: setLastUpdated }\n}\n\nexport default useTokenBalance\n","import React, { useContext } from 'react'\nimport styled, { ThemeContext } from 'styled-components'\n\ninterface SpacerProps {\n  size?: 'sm' | 'md' | 'lg'\n}\n\nconst Spacer: React.FC<SpacerProps> = ({ size = 'md' }) => {\n  const { spacing } = useContext(ThemeContext)\n\n  let s: number\n  switch (size) {\n    case 'lg':\n      s = spacing[6]\n      break\n    case 'sm':\n      s = spacing[2]\n      break\n    case 'md':\n    default:\n      s = spacing[4]\n  }\n\n  return <StyledSpacer size={s} />\n}\n\ninterface StyledSpacerProps {\n  size: number\n}\n\nconst StyledSpacer = styled.div<StyledSpacerProps>`\n  height: ${(props) => props.size}px;\n  width: ${(props) => props.size}px;\n`\n\nexport default Spacer\n","import React from 'react'\nimport styled from 'styled-components'\n\nimport Spacer from '../Spacer'\n\nconst ModalActions: React.FC = ({ children }) => {\n  const l = React.Children.toArray(children).length\n  return (\n    <StyledModalActions>\n      {React.Children.map(children, (child, i) => (\n        <>\n          <StyledModalAction>{child}</StyledModalAction>\n          {i < l - 1 && <Spacer />}\n        </>\n      ))}\n    </StyledModalActions>\n  )\n}\n\nconst StyledModalActions = styled.div`\n  align-items: center;\n  background-color: ${(props) => props.theme.colors.primaryDark}00;\n  display: flex;\n  margin: 0;\n  padding: ${(props) => props.theme.spacing[4]}px 0;\n`\n\nconst StyledModalAction = styled.div`\n  flex: 1;\n`\n\nexport default ModalActions\n","import React from 'react'\nimport styled from 'styled-components'\nimport { Text, Button, Input, InputProps, Flex, Link } from 'uikit'\nimport { useTranslation } from 'contexts/Localization'\nimport { BigNumber } from 'bignumber.js'\n\ninterface ModalInputProps {\n  max: string\n  symbol: string\n  onSelectMax?: () => void\n  onChange: (e: React.FormEvent<HTMLInputElement>) => void\n  // placeholder?: string\n  value: string\n  addLiquidityUrl?: string\n  inputTitle?: string\n  decimals?: number\n}\n\nconst getBoxShadow = ({ isWarning = false, theme }) => {\n  if (isWarning) {\n    return theme.shadows.warning\n  }\n\n  return theme.shadows.inset\n}\n\nconst StyledTokenInput = styled.div<InputProps>`\n  display: flex;\n  flex-direction: column;\n  background-color: ${({ theme }) => theme.colors.input};\n  border-radius: 2px;\n  box-shadow: ${getBoxShadow};\n  color: ${({ theme }) => theme.colors.text};\n  padding: 20px;\n  width: 100%;\n`\n\nconst StyledInput = styled(Input)`\n  box-shadow: none;\n  flex: 1;\n  margin: 0 8px;\n  padding: 0 8px;\n\n  ${({ theme }) => theme.mediaQueries.xs} {\n    width: 80px;\n  }\n\n  ${({ theme }) => theme.mediaQueries.sm} {\n    width: auto;\n  }\n`\n\nconst StyledErrorMessage = styled(Text)`\n  position: absolute;\n  bottom: -22px;\n  a {\n    display: inline;\n  }\n`\n\nconst ModalInput: React.FC<ModalInputProps> = ({\n  max,\n  symbol,\n  onChange,\n  onSelectMax,\n  value,\n  addLiquidityUrl,\n  inputTitle,\n  decimals = 18,\n}) => {\n  const { t } = useTranslation()\n  const isBalanceZero = max === '0' || !max\n\n  const displayBalance = (balance: string) => {\n    if (isBalanceZero) {\n      return '0'\n    }\n    const balanceBigNumber = new BigNumber(balance)\n    if (balanceBigNumber.gt(0) && balanceBigNumber.lt(0.0001)) {\n      return balanceBigNumber.toLocaleString()\n    }\n    return balanceBigNumber.toFixed(3, BigNumber.ROUND_DOWN)\n  }\n\n  return (\n    <div style={{ position: 'relative' }}>\n      <StyledTokenInput isWarning={isBalanceZero}>\n        <Flex justifyContent=\"space-between\" pl=\"16px\">\n          <Text fontSize=\"14px\">{inputTitle}</Text>\n          <Text fontSize=\"14px\">{t('Balance: %balance%', { balance: displayBalance(max) })}</Text>\n        </Flex>\n        <Flex alignItems=\"flex-end\" justifyContent=\"space-around\">\n          <StyledInput\n            pattern={`^[0-9]*[.,]?[0-9]{0,${decimals}}$`}\n            inputMode=\"decimal\"\n            step=\"any\"\n            min=\"0\"\n            onChange={onChange}\n            placeholder=\"0\"\n            value={value}\n          />\n          <Button scale=\"sm\" onClick={onSelectMax} mr=\"8px\">\n            {t('Max')}\n          </Button>\n          <Text fontSize=\"16px\">{symbol}</Text>\n        </Flex>\n      </StyledTokenInput>\n      {isBalanceZero && (\n        <StyledErrorMessage fontSize=\"14px\" color=\"failure\">\n          {t('No tokens to stake')}:{' '}\n          <Link fontSize=\"14px\" bold={false} href={addLiquidityUrl} external color=\"failure\">\n            {t('Get %symbol%', { symbol })}\n          </Link>\n        </StyledErrorMessage>\n      )}\n    </div>\n  )\n}\n\nexport default ModalInput\n","import React from 'react'\nimport styled from 'styled-components'\n\nconst Label = styled.div`\n  font-weight: 600;\n  font-size: 10px;\n  line-height: 16px;\n  text-transform: uppercase;\n  color: #9199b0;\n  text-align: left;\n  margin-bottom: 3px;\n`\n\nconst ContentContainer = styled.div`\n  min-height: 24px;\n  display: flex;\n  align-items: center;\n`\n\ninterface CellLayoutProps {\n  label?: string\n}\n\nconst CellLayout: React.FC<CellLayoutProps> = ({ label = '', children }) => {\n  return (\n    <div>\n      {label && <Label>{label}</Label>}\n      <ContentContainer>{children}</ContentContainer>\n    </div>\n  )\n}\n\nexport default CellLayout\n","/* eslint-disable no-await-in-loop */\n\nimport { useState, useEffect } from 'react'\n\nimport multicall from 'utils/multicall'\nimport { getGameFactoryAddress } from 'utils/addressHelpers'\n\nimport { useDIB, useGameFactory } from 'hooks/useContract'\nimport useWeb3 from 'hooks/useWeb3'\n\nimport gameFactoryAbi from 'config/abi/gameFactory.json'\nimport gameAbi from 'config/abi/game.json'\nimport BigNumber from 'bignumber.js'\nimport { BIG_TEN } from 'utils/bigNumber'\nimport tokens from 'config/constants/tokens'\nimport useRefresh from 'hooks/useRefresh'\n\nconst dibToken = tokens.dib\n\nexport enum GameState {\n  IN_PROGRESS,\n  FINISHED,\n  WIN,\n  LOSE,\n}\n\nexport type GameData = {\n  id: number\n  address: string\n  bossHp: BigNumber\n  endTime: number\n  gameDuration: number\n  gameState: GameState\n  reward: BigNumber\n  rewardPerShare: BigNumber\n  totalDeposits: BigNumber\n  tokenAllowance: BigNumber\n  chanceToWinPercent: number\n  deposits: {\n    amount: BigNumber\n    claimed: boolean\n  }\n}\n\nconst gameFactoryAddress = getGameFactoryAddress()\n\nconst useGames = (account?: string) => {\n  const { fastRefresh } = useRefresh()\n  const [isLoading, setIsLoading] = useState<boolean>(false)\n  const [data, setData] = useState<GameData[]>([])\n  const dibContract = useDIB()\n\n  const gameFactory = useGameFactory()\n  const web3 = useWeb3()\n\n  useEffect(() => {\n    const fetchAllGames = async () => {\n      try {\n        setIsLoading(true)\n\n        const gamesLength = await gameFactory.methods.gamesLength().call()\n        const calls = []\n\n        for (let i = 0; i < gamesLength; i++) {\n          calls.push({\n            address: gameFactoryAddress,\n            name: 'games',\n            params: [i],\n          })\n        }\n        const games = await multicall(gameFactoryAbi, calls)\n\n        const gamesData: GameData[] = []\n\n        for (let i = 0; i < games.length; i++) {\n          const address = games[i][0]\n\n          const methods = [\n            'bossHp',\n            'endTime',\n            'gameDuration',\n            'gameState',\n            'reward',\n            'rewardPerShare',\n            'totalDeposits',\n          ]\n\n          const gameCalls = methods.map((method) => ({\n            address,\n            name: method,\n            params: [],\n          }))\n\n          if (account) {\n            methods.push('deposits')\n            gameCalls.push({\n              address,\n              name: 'deposits',\n              params: [account],\n            })\n          }\n\n          try {\n            const results = await multicall(gameAbi, gameCalls)\n\n            const gameData = gameCalls.reduce((acc, call, index) => {\n              if (call.name === 'deposits') {\n                acc[call.name] = {\n                  amount: results[index][0],\n                  claimed: results[index][1],\n                }\n              } else {\n                acc[call.name] = results[index][0]\n              }\n\n              return acc\n            }, {} as GameData)\n\n            gameData.id = i\n\n            gameData.address = address\n            gameData.endTime = parseFloat(gameData.endTime.toString())\n            gameData.gameDuration = parseFloat(gameData.gameDuration.toString())\n            if (account) {\n              gameData.tokenAllowance = new BigNumber(await dibContract.methods.allowance(account, address).call()).div(\n                BIG_TEN.pow(dibToken.decimals),\n              )\n            } else {\n              gameData.tokenAllowance = new BigNumber(0)\n            }\n\n            gamesData.push(gameData)\n          } catch (e) {\n            console.error('Game calls error', e)\n          }\n        }\n\n        setData(gamesData)\n      } catch (e) {\n        console.error('fetch all games error', e)\n      } finally {\n        setIsLoading(false)\n      }\n    }\n\n    fetchAllGames()\n  }, [gameFactory, web3, dibContract, account, fastRefresh])\n\n  return {\n    isLoading,\n    data,\n  }\n}\n\nexport default useGames\n","import BigNumber from 'bignumber.js'\nimport { formatUnits } from 'ethers/lib/utils'\n\nimport { Token } from 'config/constants/types'\n\nimport bosses from '../data/bosses.json'\nimport { GameData } from '../hooks/useGames'\n\nexport const getBoss = (gameId: number) => {\n  const boss = bosses[gameId]\n\n  return (\n    boss || {\n      name: 'Anonymous',\n      image: '/images/anonymouspng.png',\n    }\n  )\n}\n\nexport const getChanceToWinPercent = (bossHp: number, power: number) => {\n  return roundTo((power / (power + bossHp)) * 100, 2)\n}\n\nexport const getReward = (rewardPerShare: number, depositAmount: number) => rewardPerShare * depositAmount\n\nconst bnToNumber = (value: BigNumber, decimals: number) => parseFloat(formatUnits(value.toString(), decimals))\n\nexport const getFormattedGameData = (game: GameData, token: Token) => {\n  const { decimals } = token\n  let claimableAmount = 0\n  let rewardPerShare = 0\n  let depositAmount = 0\n  let possibleReward = 0\n  let claimed = true\n\n  if (game.deposits) {\n    rewardPerShare = bnToNumber(game.rewardPerShare, decimals)\n    depositAmount = bnToNumber(game.deposits.amount, decimals)\n\n    possibleReward = getReward(rewardPerShare, depositAmount)\n\n    claimableAmount = !game.deposits.claimed ? possibleReward : 0\n    claimed = game.deposits.claimed\n  }\n\n  const bossHp = bnToNumber(game.bossHp, decimals)\n  const power = bnToNumber(game.totalDeposits, decimals)\n  const reward = bnToNumber(game.reward, decimals)\n\n  const chanceToWinPercent = getChanceToWinPercent(bossHp, power)\n\n  return {\n    bossHp,\n    power,\n    reward,\n    possibleReward,\n    claimableAmount,\n    rewardPerShare,\n    depositAmount,\n    claimed,\n    chanceToWinPercent,\n  }\n}\n\nexport const roundTo = (value, digits) => {\n  const factor = 10 ** digits\n  return Math.round(value * factor) / factor\n}\n","import React, { useState } from 'react'\n\nimport { Button, ButtonProps, Spinner } from 'uikit'\n\nconst PromiseClickButton: React.FC<ButtonProps> = ({ onClick, children, disabled, ...props }) => {\n  const [loading, setLoading] = useState<boolean>(false)\n  const handleClick = async (event) => {\n    try {\n      setLoading(true)\n      await onClick(event)\n    } catch (error) {\n      console.error(error)\n    } finally {\n      setLoading(false)\n    }\n  }\n  return (\n    <Button onClick={handleClick} disabled={disabled || loading} {...props}>\n      {loading ? (\n        <>\n          <Spinner size={24} />{' '}\n        </>\n      ) : null}\n      {children}\n    </Button>\n  )\n}\n\nexport default PromiseClickButton\n","import BigNumber from 'bignumber.js'\nimport React, { useCallback, useMemo, useState, useEffect } from 'react'\nimport styled from 'styled-components'\nimport { Button, Modal } from 'uikit'\nimport { ethers } from 'ethers'\n\nimport ModalActions from 'components/ModalActions'\nimport ModalInput from 'components/ModalInput'\nimport { useTranslation } from 'contexts/Localization'\nimport { getFullDisplayBalance } from 'utils/formatBalance'\n\nimport tokens from 'config/constants/tokens'\nimport { useDIB } from 'hooks/useContract'\nimport { useWeb3React } from '@web3-react/core'\nimport PromiseClickButton from 'components/PromiseClickButton'\nimport { BIG_TEN } from 'utils/bigNumber'\n\nconst TextWrapper = styled.div`\n  font-size: 16px;\n  line-height: 140%;\n  margin-top: 40px;\n  margin-bottom: 40px;\n  color: #fff;\n`\n\nconst Caption = styled.div`\n  text-align: center;\n  color: #e3ccf1;\n  margin: 20px auto;\n`\n\nconst dibToken = tokens.dib\n\nconst useApprove = (gameAddress) => {\n  const { account } = useWeb3React()\n  const dibContract = useDIB()\n  const [loadingAllowance, setLoadingAllowance] = useState<boolean>(false)\n  const [allowance, setAllowance] = useState<BigNumber>(new BigNumber('0'))\n\n  const getAllowance = useCallback(async () => {\n    try {\n      setLoadingAllowance(true)\n      const allowanceWei = new BigNumber(await dibContract.methods.allowance(account, gameAddress).call())\n      setAllowance(allowanceWei.dividedBy(BIG_TEN.pow(dibToken.decimals)))\n    } catch (e) {\n      console.error(e)\n    } finally {\n      setLoadingAllowance(false)\n    }\n  }, [dibContract, account, gameAddress])\n\n  const handleApprove = useCallback(async () => {\n    try {\n      const tx = await dibContract.methods.approve(gameAddress, ethers.constants.MaxUint256).send({ from: account })\n      await getAllowance()\n      return tx\n    } catch (e) {\n      return false\n    }\n  }, [account, dibContract, gameAddress, getAllowance])\n\n  useEffect(() => {\n    getAllowance()\n  }, [account, getAllowance, gameAddress])\n\n  return { onApprove: handleApprove, allowance, loadingAllowance }\n}\n\nconst ApproveButton = ({ onClick }) => {\n  return (\n    <PromiseClickButton width=\"100%\" onClick={onClick}>\n      Approve\n    </PromiseClickButton>\n  )\n}\n\ninterface DepositModalProps {\n  max: BigNumber\n  onConfirm: (amount: string) => void\n  onDismiss?: () => void\n  gameAddress: string\n}\n\nconst DepositModal: React.FC<DepositModalProps> = ({ max, onConfirm, onDismiss, gameAddress }) => {\n  const [val, setVal] = useState('')\n  const [pendingTx, setPendingTx] = useState(false)\n  const { t } = useTranslation()\n  const fullBalance = useMemo(() => {\n    return getFullDisplayBalance(max)\n  }, [max])\n\n  const valNumber = new BigNumber(val || 0)\n  const fullBalanceNumber = new BigNumber(fullBalance)\n\n  const handleChange = useCallback(\n    (e: React.FormEvent<HTMLInputElement>) => {\n      if (e.currentTarget.validity.valid) {\n        setVal(e.currentTarget.value.replace(/,/g, '.'))\n      }\n    },\n    [setVal],\n  )\n\n  const handleSelectMax = useCallback(() => {\n    setVal(fullBalance)\n  }, [fullBalance, setVal])\n\n  const { onApprove, allowance } = useApprove(gameAddress)\n\n  const isApproved = allowance.isGreaterThanOrEqualTo(valNumber)\n\n  return (\n    <Modal title={t('Add DIB to fight the boss')} className=\"game-stake-modal\" onDismiss={onDismiss}>\n      <ModalInput\n        value={val}\n        onSelectMax={handleSelectMax}\n        onChange={handleChange}\n        max={fullBalance}\n        symbol={dibToken.symbol}\n        inputTitle={t('Stake')}\n        decimals={dibToken.decimals}\n      />\n      <TextWrapper>\n        <ul>\n          <li>This is a global raid and You are on The Dog team! Add DIBs to increase The Dog HP.</li>\n          <li>The more HP The Dog has, the higher chance for The Dog team to win.</li>\n          <li>Game pool includes Boss HP tokens and Dog HP tokens combined!</li>\n          <li>\n            If The Dog wins, you are all Winners! All DIB tokens in this game pool are distributed among all players.\n          </li>\n          <li>If The Dog looses, all DIB tokens in this game pool are burned.</li>\n        </ul>\n      </TextWrapper>\n      <Caption>Fight together to defeat the boss!</Caption>\n      <ModalActions>\n        <Button variant=\"secondary\" onClick={onDismiss} width=\"100%\" disabled={pendingTx}>\n          {t('Cancel')}\n        </Button>\n        {isApproved ? (\n          <Button\n            width=\"100%\"\n            disabled={pendingTx || !valNumber.isFinite() || valNumber.eq(0) || valNumber.gt(fullBalanceNumber)}\n            onClick={async () => {\n              setPendingTx(true)\n              await onConfirm(val)\n              setPendingTx(false)\n              onDismiss()\n            }}\n          >\n            {pendingTx ? t('Pending Confirmation') : t('Confirm')}\n          </Button>\n        ) : (\n          <ApproveButton onClick={onApprove} />\n        )}\n      </ModalActions>\n    </Modal>\n  )\n}\n\nexport default DepositModal\n","import React, { useEffect, useState } from 'react'\nimport { useWeb3React } from '@web3-react/core'\n\nimport { useGameFactory } from 'hooks/useContract'\n\nimport { GameData, GameState } from 'views/Game/hooks/useGames'\nimport PromiseClickButton from 'components/PromiseClickButton'\n\ntype AdminToolsProps = {\n  game: GameData\n}\n\nconst AdminTools: React.FC<AdminToolsProps> = ({ game }) => {\n  const { account } = useWeb3React()\n  const [isAdmin, setIsAdmin] = useState<boolean>(false)\n\n  const gameFactory = useGameFactory()\n  const isGameFinished = game.endTime < Date.now() / 1000\n  const canFinish = isGameFinished && game.gameState === GameState.IN_PROGRESS\n\n  useEffect(() => {\n    const fetchIsAdmin = async () => {\n      const owner = await gameFactory.methods.owner().call()\n      if (owner && account) {\n        setIsAdmin(owner.toLowerCase() === account.toLowerCase())\n      }\n    }\n\n    fetchIsAdmin()\n  }, [account, gameFactory])\n\n  const onFinish = async () => {\n    if (isGameFinished) {\n      await gameFactory.methods.finishGame(game.id).send({ from: account })\n    }\n  }\n\n  return <>{canFinish && <PromiseClickButton onClick={onFinish}>Fight!</PromiseClickButton>}</>\n}\n\nexport default AdminTools\n","/* eslint-disable react/no-array-index-key */\n\nimport { formatUnits } from '@ethersproject/units'\nimport { useWeb3React } from '@web3-react/core'\nimport BigNumber from 'bignumber.js'\nimport styled from 'styled-components'\nimport Countdown from 'react-countdown'\n\nimport { CHAIN_ID } from 'config'\nimport tokens from 'config/constants/tokens'\nimport useTokenBalance from 'hooks/useTokenBalance'\nimport useWeb3 from 'hooks/useWeb3'\nimport React, { useMemo, useCallback } from 'react'\nimport { HelpIcon, useModal, useTooltip } from 'uikit'\nimport { BIG_TEN } from 'utils/bigNumber'\nimport { getGameContract } from 'utils/contractHelpers'\nimport { GameData, GameState } from 'views/Game/hooks/useGames'\nimport { getBoss, getChanceToWinPercent, getFormattedGameData, roundTo } from 'views/Game/utils'\n\nimport PromiseClickButton from 'components/PromiseClickButton'\n\nimport DepositModal from '../DepositModal'\n\nimport './GameBanner.css'\nimport AdminTools from '../AdminTools'\n\nconst stake = async (gameContract, amount, account) => {\n  return gameContract.methods.stake(new BigNumber(amount).times(BIG_TEN.pow(18)).toString()).send({ from: account })\n}\n\nconst CountdownNumber = styled.span`\n  font-size: 30px;\n  font-weight: bold;\n`\n\nconst useStake = () => {\n  const { account } = useWeb3React()\n  const web3 = useWeb3()\n  const handleStake = useCallback(\n    async (gameAddress, amount) => {\n      const gameContract = getGameContract(gameAddress, web3)\n      await stake(gameContract, amount, account)\n    },\n    [web3, account],\n  )\n  return {\n    onStake: handleStake,\n  }\n}\n\nconst dibToken = tokens.dib\n\nconst GameStateLabel: React.FC<{ gameState: GameState }> = ({ gameState }) => {\n  let label = ''\n  const classNames = ['game-banner__info', 'game-state-label']\n\n  if (gameState === GameState.IN_PROGRESS) {\n    label = 'Boss landed'\n    classNames.push('game-state-label--in-progress')\n  } else if (gameState === GameState.FINISHED) {\n    label = 'Fighting the boss. Wait for the fight results'\n    classNames.push('game-state-label--finised')\n  } else if (gameState === GameState.WIN) {\n    label = 'Victory'\n    classNames.push('game-state-label--won')\n  } else if (gameState === GameState.LOSE) {\n    label = 'Defeat'\n    classNames.push('game-state-label--lost')\n  }\n\n  const className = classNames.join(' ')\n\n  return (\n    <div className={className}>\n      <span>{label}</span>\n    </div>\n  )\n}\n\ntype GameOpponnetProps = {\n  title: string\n  image: string\n  hp: number\n}\n\nconst GameOpponnet: React.FC<GameOpponnetProps> = ({ title, image, hp }) => (\n  <div className=\"game-banner__opponent\">\n    <div className=\"game-banner__opponent-inner\">\n      <img className=\"game-banner__persona\" alt={title} src={image} />\n    </div>\n    <div className=\"game-banner__opponent-name\">{title}</div>\n    <div className=\"game-banner__opponent-hp\">{Math.round(hp)} HP</div>\n  </div>\n)\n\ntype GameInfoItemProps = {\n  label: any\n  value: any\n  caption?: any\n}\n\nconst GameInfoItem: React.FC<GameInfoItemProps> = ({ label, caption, value }) => {\n  const { targetRef, tooltip, tooltipVisible } = useTooltip(caption, { placement: 'auto', tooltipOffset: [20, 10] })\n  return (\n    <div className=\"game-info-item\">\n      <div className=\"game-info-item__label\">\n        {label}\n        <div ref={targetRef}>\n          <HelpIcon color=\"textSubtle\" />\n        </div>\n        {tooltipVisible && tooltip}\n      </div>\n      <div className=\"game-info-item__value\">{value}</div>\n    </div>\n  )\n}\n\nconst GameInfo: React.FC<{ items: GameInfoItemProps[] }> = ({ items }) => {\n  return (\n    <div className=\"game-info\">\n      {items.map((item, index) => (\n        <GameInfoItem key={index} label={item.label} value={item.value} caption={item.caption} />\n      ))}\n    </div>\n  )\n}\n\ntype GameBalanceProps = {\n  dogHp: number\n  bossHp: number\n}\n\nconst GameBalance: React.FC<GameBalanceProps> = ({ dogHp, bossHp }) => {\n  const totalHp = useMemo(() => dogHp + bossHp, [dogHp, bossHp])\n  const bossWidth = useMemo(() => `${(bossHp / totalHp) * 100}%`, [bossHp, totalHp])\n  const dogWidth = useMemo(() => `${(dogHp / totalHp) * 100}%`, [dogHp, totalHp])\n  return (\n    <div className=\"game-balance\">\n      <div className=\"game-balance__bars\">\n        <div className=\"game-balance__boss game-balance__bar\" style={{ width: bossWidth }} />\n        <div className=\"game-balance__dog game-balance__bar\" style={{ width: dogWidth }} />\n      </div>\n    </div>\n  )\n}\n\ntype GameBannerProps = {\n  game: GameData\n}\n\nconst GameBanner: React.FC<GameBannerProps> = ({ game }) => {\n  const { onStake } = useStake()\n\n  const { balance } = useTokenBalance(dibToken.address[CHAIN_ID])\n  const tokenBalance = new BigNumber(balance).times(new BigNumber(10).pow(18 - dibToken.decimals))\n\n  const handleStake = async (amount) => {\n    await onStake(game.address, amount)\n  }\n\n  const { bossHp, power, reward, possibleReward, depositAmount } = useMemo(\n    () => getFormattedGameData(game, dibToken),\n    [game],\n  )\n  const boss = useMemo(() => getBoss(game.id), [game.id])\n  const isInProgress = game.gameState === GameState.IN_PROGRESS\n  const isActive = isInProgress && game.endTime > Date.now() / 1000\n\n  const [onPresentDepositModal] = useModal(\n    <DepositModal max={tokenBalance} onConfirm={handleStake} gameAddress={game.address} />,\n  )\n\n  const countdownRender = (args) => {\n    const { completed, formatted } = args\n    const { days, hours, minutes, seconds } = formatted\n    if (completed) {\n      // Render a completed state\n      return <GameStateLabel gameState={game.gameState} />\n    }\n    // Render a countdown\n    return (\n      <div>\n        <div>\n          Landing in\n          {days > 0 && (\n            <>\n              <CountdownNumber>{days}</CountdownNumber> days\n            </>\n          )}{' '}\n          {hours > 0 && (\n            <>\n              <CountdownNumber>{hours}</CountdownNumber> hours\n            </>\n          )}{' '}\n          <CountdownNumber>{minutes}</CountdownNumber> minutes <CountdownNumber>{seconds}</CountdownNumber> seconds\n        </div>\n      </div>\n    )\n  }\n\n  const chanceToWinPercent = useMemo(() => getChanceToWinPercent(bossHp, power), [power, bossHp])\n\n  const infoItems = useMemo(() => {\n    return [\n      {\n        label: 'Chance to win',\n        value: `${chanceToWinPercent}%`,\n        caption:\n          'The more DIBS are deposited to The Dog, the higher his chances to win and make you the winner.  When The Dog has the same HP as the Boss chances are equal. Formula: chances = dogHP / (bossHP + dogHP) * 100%',\n      },\n      {\n        label: 'Boss defeat reward',\n        value: `${roundTo(reward, 2)} DIB`,\n        caption:\n          'The amount of DIB that will be distributed between players if The Dog wins. Rewards are distributed proportionally to their deposits. If the boss wins all tokens are burned.',\n      },\n      {\n        label: 'Your stake',\n        value: `${roundTo(depositAmount, 2)} DIB`,\n        caption:\n          'The amount of tokens you deposited to fight the boss. The more you deposit, the more The Dog has chances to win and the more you will get rewards if The Dog wins.',\n      },\n    ]\n  }, [chanceToWinPercent, reward, depositAmount])\n\n  return (\n    <div className=\"game-banner\">\n      {/* <div className=\"game-banner__header\"></div> */}\n      <div className=\"game-banner__inner\">\n        <GameOpponnet title={boss.name} image={boss.image} hp={bossHp} />\n        <div className=\"game-banner__vs\">vs</div>\n        <GameOpponnet title=\"The Dog In Black\" image=\"/images/bosses/dib.png\" hp={power} />\n      </div>\n      <GameBalance bossHp={bossHp} dogHp={power} />\n      <GameInfo items={infoItems} />\n      <div className=\"game-banner__countdown\">\n        <Countdown date={game.endTime * 1000} renderer={countdownRender} />\n      </div>\n      <div className=\"game-banner__cta\">\n        {isActive && (\n          <PromiseClickButton scale=\"lg\" onClick={onPresentDepositModal}>\n            Add DIB HP\n          </PromiseClickButton>\n        )}\n\n        <AdminTools game={game} />\n      </div>\n    </div>\n  )\n}\n\nexport default GameBanner\n","import { useWeb3React } from '@web3-react/core'\nimport PromiseClickButton from 'components/PromiseClickButton'\nimport tokens from 'config/constants/tokens'\nimport useWeb3 from 'hooks/useWeb3'\nimport React, { useMemo, useCallback } from 'react'\nimport styled from 'styled-components'\nimport { getGameContract } from 'utils/contractHelpers'\nimport CellLayout from 'views/Farms/components/FarmTable/CellLayout'\nimport { GameData, GameState } from 'views/Game/hooks/useGames'\nimport { getBoss, getFormattedGameData, roundTo } from 'views/Game/utils'\n\nimport './GameRow.css'\n\nconst StyledTr = styled.tr`\n  cursor: pointer;\n  background: #1b2131;\n  border-bottom: 1px solid #2c3550;\n\n  color: #fff;\n\n  &:nth-child(odd) {\n    background: #1f2638;\n  }\n\n  @media (max-width: 560px) {\n    td {\n      display: block;\n    }\n  }\n`\n\nconst CellInner = styled.div`\n  padding: 14px 20px;\n  display: flex;\n  width: 100%;\n  align-items: center;\n  padding-right: 8px;\n`\n\nconst useClaim = () => {\n  const { account } = useWeb3React()\n  const web3 = useWeb3()\n  const handleClaim = useCallback(\n    async (gameAddress) => {\n      const gameContract = getGameContract(gameAddress, web3)\n      await gameContract.methods.claimRewards().send({ from: account })\n    },\n    [web3, account],\n  )\n\n  return {\n    onClaim: handleClaim,\n  }\n}\n\ntype GameRowProps = {\n  game: GameData\n}\n\nconst dibToken = tokens.dib\n\nconst GameRow: React.FC<GameRowProps> = ({ game }) => {\n  const boss = useMemo(() => getBoss(game.id), [game.id])\n  const { bossHp, reward, claimableAmount, possibleReward, chanceToWinPercent } = useMemo(\n    () => getFormattedGameData(game, dibToken),\n    [game],\n  )\n  const { onClaim } = useClaim()\n\n  const handleClaim = async () => {\n    await onClaim(game.address)\n  }\n\n  return (\n    <StyledTr className=\"game-row\">\n      <td className=\"game-row__cell\">\n        <CellInner>\n          <div className=\"game-row__persona\">\n            <img src={boss.image} alt={boss.name} />\n            <div>{boss.name}</div>\n          </div>\n        </CellInner>\n      </td>\n      <td className=\"game-row__cell\">\n        <CellInner>\n          {game.gameState === GameState.WIN ? (\n            <div className=\"game-state game-state--win\">VICTORY</div>\n          ) : (\n            <div className=\"game-state game-state--lose\">DEFEAT</div>\n          )}\n        </CellInner>\n      </td>\n      <td className=\"game-row__cell\">\n        <CellInner>\n          <CellLayout label=\"Total Reward\">{roundTo(reward, 2)} DIB</CellLayout>\n        </CellInner>\n      </td>\n      <td className=\"game-row__cell\">\n        <CellInner>\n          <CellLayout label=\"Boss HP\">{roundTo(bossHp, 2)} HP</CellLayout>\n        </CellInner>\n      </td>\n      <td className=\"game-row__cell\">\n        <CellInner>\n          <CellLayout label=\"Chances\">{roundTo(chanceToWinPercent, 2)}%</CellLayout>\n        </CellInner>\n      </td>\n      <td className=\"game-row__cell\">\n        <CellInner>\n          <CellLayout label=\"Your reward\">{roundTo(possibleReward, 2)} DIB</CellLayout>\n        </CellInner>\n      </td>\n      <td className=\"game-row__cell\">\n        <CellInner>\n          {claimableAmount > 0 ? (\n            <PromiseClickButton scale=\"lg\" onClick={handleClaim}>\n              Claim\n            </PromiseClickButton>\n          ) : null}\n        </CellInner>\n      </td>\n    </StyledTr>\n  )\n}\n\nexport default GameRow\n","import { useTranslation } from 'contexts/Localization'\nimport React, { useRef } from 'react'\nimport styled from 'styled-components'\n\nimport { Button, ChevronUpIcon } from 'uikit'\n\nimport { GameData } from 'views/Game/hooks/useGames'\n\nimport GameRow from '../GameRow'\n\nconst TableWrapper = styled.div`\n  overflow: visible;\n\n  &::-webkit-scrollbar {\n    display: none;\n  }\n`\n\nconst StyledTable = styled.table`\n  border-collapse: collapse;\n  font-size: 14px;\n  border-radius: 4px;\n  margin-left: auto;\n  margin-right: auto;\n  width: 100%;\n`\n\nconst TableBody = styled.tbody`\n  & tr {\n    td {\n      font-size: 16px;\n      vertical-align: middle;\n    }\n  }\n`\n\nconst TableContainer = styled.div`\n  position: relative;\n`\n\nconst ScrollButtonContainer = styled.div`\n  display: flex;\n  justify-content: center;\n  padding-top: 5px;\n  padding-bottom: 5px;\n`\n\ntype GamesTableProps = {\n  games: GameData[]\n}\n\nconst GamesTable: React.FC<GamesTableProps> = ({ games }) => {\n  const { t } = useTranslation()\n\n  const tableWrapperEl = useRef<HTMLDivElement>(null)\n\n  const scrollToTop = (): void => {\n    tableWrapperEl.current.scrollIntoView({\n      behavior: 'smooth',\n    })\n  }\n  return (\n    <TableContainer>\n      <TableWrapper ref={tableWrapperEl}>\n        <StyledTable>\n          <TableBody>\n            {games.map((game) => (\n              <GameRow game={game} key={`game-row-${game.id}`} />\n            ))}\n          </TableBody>\n        </StyledTable>\n      </TableWrapper>\n      <ScrollButtonContainer>\n        <Button variant=\"text\" onClick={scrollToTop}>\n          <ChevronUpIcon width=\"24px\" color=\"primary\" />\n          {t('Back To Top')}\n        </Button>\n      </ScrollButtonContainer>\n    </TableContainer>\n  )\n}\n\nexport default GamesTable\n","/* eslint-disable react/no-array-index-key */\n\nimport React, { useMemo } from 'react'\nimport { useWeb3React } from '@web3-react/core'\n\nimport { Spinner } from 'uikit'\n\nimport Page from 'components/layout/Page'\n\nimport GameBanner from './components/GameBanner'\nimport GameRow from './components/GameRow'\nimport useGames, { GameState } from './hooks/useGames'\n\nimport './Game.css'\nimport GamesTable from './components/GamesTabe'\n\nconst Game = () => {\n  const { account } = useWeb3React()\n  const { data, isLoading } = useGames(account)\n  const { activeGames, finishedGames } = useMemo(() => {\n    const active = []\n    const finished = []\n\n    data.forEach((game) => {\n      const isActive = ![GameState.LOSE, GameState.WIN].includes(game.gameState)\n      if (isActive) {\n        active.push(game)\n      } else {\n        finished.push(game)\n      }\n    })\n\n    return {\n      activeGames: active.sort((a, b) => b.id - a.id),\n      finishedGames: finished.sort((a, b) => b.id - a.id),\n    }\n  }, [data])\n  const loading = isLoading && !data.length\n  return (\n    <Page>\n      {loading ? (\n        <div className=\"games__loader\">\n          <Spinner />\n        </div>\n      ) : (\n        <>\n          <div className=\"games\">\n            <div className=\"game-header\">\n              <div className=\"game-title\">Forget it!</div>\n              <div className=\"game-title-caption\">first play 2 burn game</div>\n            </div>\n            {activeGames.map((game) => (\n              <GameBanner key={game.address} game={game} />\n            ))}\n          </div>\n          <div className=\"finished-games\">\n            <div className=\"finished-games-title\">Finished games</div>\n            <GamesTable games={finishedGames} />\n          </div>\n        </>\n      )}\n    </Page>\n  )\n}\n\nexport default Game\n"],"sourceRoot":""}