{"version":3,"sources":["../node_modules/lodash/max.js","../node_modules/lodash/_baseExtremum.js","../node_modules/lodash/_baseGt.js","views/Home/components/TotalValueLockedCard.tsx","hooks/useIntersectionObserver.ts","views/Home/components/EarnStadiumsAPRCard.tsx","views/Home/components/EarnGoalsAPRCard.tsx","views/Home/Home.tsx"],"names":["baseExtremum","require","baseGt","identity","module","exports","array","length","undefined","isSymbol","iteratee","comparator","index","value","current","computed","result","other","StyledTotalValueLockedCard","styled","Card","_templateObject","_taggedTemplateLiteral","TotalValueLockedCard","t","useTranslation","data","useTotalValue","tvl","toLocaleString","maximumFractionDigits","_jsx","children","_jsxs","CardBody","Heading","textAlign","mb","scale","concat","Skeleton","height","useIntersectionObserver","observerRef","useRef","_useState","useState","_useState2","_slicedToArray","observerIsSet","setObserverIsSet","_useState3","_useState4","isIntersecting","setIsIntersecting","useEffect","IntersectionObserver","_ref","entry","rootMargin","threshold","observe","StyledFarmStakingCard","theme","mediaQueries","lg","CardMidContent","attrs","_templateObject2","EarnAPRCard","isFetchingFarmData","setIsFetchingFarmData","farmsLP","useFarms","dibPrice","usePriceDIBUsdc","dispatch","useAppDispatch","_useIntersectionObser","dibPerSecond","getBalanceNumber","useDIBPerSecond","fetchFarmData","_ref2","_asyncToGenerator","_regeneratorRuntime","mark","_callee","wrap","_context","prev","next","fetchFarmsPublicDataAsync","nonArchivedFarms","map","nonArchivedFarm","pid","finish","stop","apply","arguments","highestApr","useMemo","gt","aprs","farm","isTokenOnly","multiplier","lpTotalInQuoteToken","quoteToken","usdcPrice","totalLiquidity","BigNumber","times","getFarmApr","poolWeight","lpAddresses","CHAIN_ID","maxApr","max","aprText","_earnAprText$split","split","_earnAprText$split2","earnUpTo","InFarms","NavLink","exact","activeClassName","to","id","color","_Fragment","animation","variant","ref","Flex","justifyContent","ArrowForwardIcon","mt","Cards","BaseLayout","sm","token","getDIBAddress","TokenCard","addWatchDIBToken","useCallback","provider","window","ethereum","request","method","params","type","options","address","symbol","decimals","image","BASE_URL","t0","alignItems","Button","mr","as","target","href","BASE_SWAP_URL","getWethAddress","onClick","MetamaskIcon","margin","flexDirection","LinkExternal","small","getScanTokenUrl","CopyToClipboard","toCopy","Home","Page","TutorialBanner","CardsColumn","FarmStakingCard","EarnStadiumsAPRCard","EarnGoalsAPRCard","DIBStats","div"],"mappings":"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","file":"static/js/11.819d34e2.chunk.js","sourcesContent":["var baseExtremum = require('./_baseExtremum'),\n    baseGt = require('./_baseGt'),\n    identity = require('./identity');\n\n/**\n * Computes the maximum value of `array`. If `array` is empty or falsey,\n * `undefined` is returned.\n *\n * @static\n * @since 0.1.0\n * @memberOf _\n * @category Math\n * @param {Array} array The array to iterate over.\n * @returns {*} Returns the maximum value.\n * @example\n *\n * _.max([4, 2, 8, 6]);\n * // => 8\n *\n * _.max([]);\n * // => undefined\n */\nfunction max(array) {\n  return (array && array.length)\n    ? baseExtremum(array, identity, baseGt)\n    : undefined;\n}\n\nmodule.exports = max;\n","var isSymbol = require('./isSymbol');\n\n/**\n * The base implementation of methods like `_.max` and `_.min` which accepts a\n * `comparator` to determine the extremum value.\n *\n * @private\n * @param {Array} array The array to iterate over.\n * @param {Function} iteratee The iteratee invoked per iteration.\n * @param {Function} comparator The comparator used to compare values.\n * @returns {*} Returns the extremum value.\n */\nfunction baseExtremum(array, iteratee, comparator) {\n  var index = -1,\n      length = array.length;\n\n  while (++index < length) {\n    var value = array[index],\n        current = iteratee(value);\n\n    if (current != null && (computed === undefined\n          ? (current === current && !isSymbol(current))\n          : comparator(current, computed)\n        )) {\n      var computed = current,\n          result = value;\n    }\n  }\n  return result;\n}\n\nmodule.exports = baseExtremum;\n","/**\n * The base implementation of `_.gt` which doesn't coerce arguments.\n *\n * @private\n * @param {*} value The value to compare.\n * @param {*} other The other value to compare.\n * @returns {boolean} Returns `true` if `value` is greater than `other`,\n *  else `false`.\n */\nfunction baseGt(value, other) {\n  return value > other;\n}\n\nmodule.exports = baseGt;\n","import React from 'react'\nimport styled from 'styled-components'\nimport { Card, CardBody, Heading, Skeleton } from 'uikit'\nimport { useTranslation } from 'contexts/Localization'\nimport { useTotalValue } from 'state/hooks'\n\nconst StyledTotalValueLockedCard = styled(Card)``\n\nconst TotalValueLockedCard = () => {\n  const { t } = useTranslation()\n  const data = useTotalValue()\n  const tvl = data ? data.toLocaleString('en-US', { maximumFractionDigits: 1 }) : null\n\n  return (\n    <StyledTotalValueLockedCard>\n      <CardBody>\n        <Heading textAlign=\"right\" mb=\"24px\">\n          {t('Total Value Locked')}\n        </Heading>\n        {data ? <Heading scale=\"xl\">{`$${tvl}`}</Heading> : <Skeleton height={66} />}\n      </CardBody>\n    </StyledTotalValueLockedCard>\n  )\n}\n\nexport default TotalValueLockedCard\n","import { useEffect, useRef, useState } from 'react'\n\nconst useIntersectionObserver = () => {\n  const observerRef = useRef<HTMLDivElement>(null)\n  const [observerIsSet, setObserverIsSet] = useState(false)\n  const [isIntersecting, setIsIntersecting] = useState(false)\n\n  useEffect(() => {\n    const checkObserverIsIntersecting = ([entry]: IntersectionObserverEntry[]) => {\n      setIsIntersecting(entry.isIntersecting)\n    }\n\n    if (!observerIsSet) {\n      const intersectionObserver = new IntersectionObserver(checkObserverIsIntersecting, {\n        rootMargin: '0px',\n        threshold: 1,\n      })\n      intersectionObserver.observe(observerRef.current)\n      setObserverIsSet(true)\n    }\n  }, [observerIsSet])\n\n  return { observerRef, isIntersecting }\n}\n\nexport default useIntersectionObserver\n","import React, { useEffect, useMemo, useState } from 'react'\nimport styled from 'styled-components'\nimport { Heading, Card, CardBody, Flex, ArrowForwardIcon, Skeleton } from 'uikit'\nimport max from 'lodash/max'\nimport { NavLink } from 'react-router-dom'\nimport BigNumber from 'bignumber.js'\nimport { useTranslation } from 'contexts/Localization'\nimport { useAppDispatch } from 'state'\nimport { useFarms, usePriceDIBUsdc } from 'state/hooks'\nimport { fetchFarmsPublicDataAsync, nonArchivedFarms } from 'state/farms'\nimport { getFarmApr } from 'utils/apr'\nimport useIntersectionObserver from 'hooks/useIntersectionObserver'\nimport { CHAIN_ID } from 'config'\nimport { useDIBPerSecond } from 'hooks/useTokenBalance'\nimport { getBalanceNumber } from 'utils/formatBalance'\n\nconst StyledFarmStakingCard = styled(Card)`\n  margin-left: auto;\n  margin-right: auto;\n  width: 100%;\n\n  ${({ theme }) => theme.mediaQueries.lg} {\n    margin: 0;\n    max-width: none;\n  }\n\n  transition: opacity 200ms;\n  &:hover {\n    opacity: 0.65;\n  }\n`\nconst CardMidContent = styled(Heading).attrs({ scale: 'xl' })`\n  line-height: 44px;\n`\nconst EarnAPRCard = () => {\n  const [isFetchingFarmData, setIsFetchingFarmData] = useState(true)\n  const { t } = useTranslation()\n  const { data: farmsLP } = useFarms()\n  const dibPrice = usePriceDIBUsdc()\n  const dispatch = useAppDispatch()\n  const { observerRef, isIntersecting } = useIntersectionObserver()\n\n  const dibPerSecond = getBalanceNumber(useDIBPerSecond())\n\n  // Fetch farm data once to get the max APR\n  useEffect(() => {\n    const fetchFarmData = async () => {\n      try {\n        await dispatch(fetchFarmsPublicDataAsync(nonArchivedFarms.map((nonArchivedFarm) => nonArchivedFarm.pid)))\n      } finally {\n        setIsFetchingFarmData(false)\n      }\n    }\n\n    if (isIntersecting) {\n      fetchFarmData()\n    }\n  }, [dispatch, setIsFetchingFarmData, isIntersecting])\n\n  const highestApr = useMemo(() => {\n    if (dibPrice.gt(0)) {\n      const aprs = farmsLP.map((farm) => {\n        // Filter inactive farms, because their theoretical APR is super high. In practice, it's 0.\n        if (farm.isTokenOnly) return null\n        if (\n          farm.pid ||\n          (farm.pid === 0 && farm.multiplier !== '0X' && farm.lpTotalInQuoteToken && farm.quoteToken.usdcPrice)\n        ) {\n          const totalLiquidity = new BigNumber(farm.lpTotalInQuoteToken).times(farm.quoteToken.usdcPrice)\n          return getFarmApr(\n            new BigNumber(farm.poolWeight),\n            dibPrice,\n            totalLiquidity,\n            farm.lpAddresses[CHAIN_ID],\n            dibPerSecond,\n          )\n        }\n        return null\n      })\n\n      const maxApr = max(aprs)\n      return maxApr?.toLocaleString('en-US', { maximumFractionDigits: 2 })\n    }\n    return null\n  }, [dibPrice, farmsLP, dibPerSecond])\n\n  const aprText = highestApr || '-'\n  const earnAprText = t('Earn up to %highestApr% APR in Farms', { highestApr: aprText })\n  const [earnUpTo, InFarms] = earnAprText.split(aprText)\n\n  return (\n    <StyledFarmStakingCard>\n      <NavLink exact activeClassName=\"active\" to=\"/farms\" id=\"farm-apr-cta\">\n        <CardBody>\n          <Heading color=\"contrast\" scale=\"lg\">\n            {earnUpTo}\n          </Heading>\n          <CardMidContent>\n            {highestApr && !isFetchingFarmData ? (\n              `${highestApr}%`\n            ) : (\n              <>\n                <Skeleton animation=\"pulse\" variant=\"rect\" height=\"44px\" />\n                <div ref={observerRef} />\n              </>\n            )}\n          </CardMidContent>\n          <Flex justifyContent=\"space-between\">\n            <Heading color=\"contrast\" scale=\"lg\">\n              {InFarms}\n            </Heading>\n            <ArrowForwardIcon mt={30} color=\"primary\" />\n          </Flex>\n        </CardBody>\n      </NavLink>\n    </StyledFarmStakingCard>\n  )\n}\n\nexport default EarnAPRCard\n","import React, { useEffect, useMemo, useState } from 'react'\nimport styled from 'styled-components'\nimport { Heading, Card, CardBody, Flex, ArrowForwardIcon, Skeleton } from 'uikit'\nimport max from 'lodash/max'\nimport { NavLink } from 'react-router-dom'\nimport BigNumber from 'bignumber.js'\nimport { useTranslation } from 'contexts/Localization'\nimport { useAppDispatch } from 'state'\nimport { useFarms, usePriceDIBUsdc } from 'state/hooks'\nimport { fetchFarmsPublicDataAsync, nonArchivedFarms } from 'state/farms'\nimport { getFarmApr } from 'utils/apr'\nimport useIntersectionObserver from 'hooks/useIntersectionObserver'\nimport { CHAIN_ID } from 'config'\nimport { useDIBPerSecond } from 'hooks/useTokenBalance'\nimport { getBalanceNumber } from 'utils/formatBalance'\n\nconst StyledFarmStakingCard = styled(Card)`\n  margin-left: auto;\n  margin-right: auto;\n  width: 100%;\n\n  ${({ theme }) => theme.mediaQueries.lg} {\n    margin: 0;\n    max-width: none;\n  }\n\n  transition: opacity 200ms;\n  &:hover {\n    opacity: 0.65;\n  }\n`\nconst CardMidContent = styled(Heading).attrs({ scale: 'xl' })`\n  line-height: 44px;\n`\nconst EarnAPRCard = () => {\n  const [isFetchingFarmData, setIsFetchingFarmData] = useState(true)\n  const { t } = useTranslation()\n  const { data: farmsLP } = useFarms()\n  const dibPrice = usePriceDIBUsdc()\n  const dispatch = useAppDispatch()\n  const { observerRef, isIntersecting } = useIntersectionObserver()\n  const dibPerSecond = getBalanceNumber(useDIBPerSecond())\n\n  // Fetch farm data once to get the max APR\n  useEffect(() => {\n    const fetchFarmData = async () => {\n      try {\n        await dispatch(fetchFarmsPublicDataAsync(nonArchivedFarms.map((nonArchivedFarm) => nonArchivedFarm.pid)))\n      } finally {\n        setIsFetchingFarmData(false)\n      }\n    }\n\n    if (isIntersecting) {\n      fetchFarmData()\n    }\n  }, [dispatch, setIsFetchingFarmData, isIntersecting])\n\n  const highestApr = useMemo(() => {\n    if (dibPrice.gt(0)) {\n      const aprs = farmsLP.map((farm) => {\n        // Filter inactive farms, because their theoretical APR is super high. In practice, it's 0.\n        if (!farm.isTokenOnly) return null\n        if (farm.pid !== 0 && farm.multiplier !== '0X' && farm.lpTotalInQuoteToken && farm.quoteToken.usdcPrice) {\n          const totalLiquidity = new BigNumber(farm.lpTotalInQuoteToken).times(farm.quoteToken.usdcPrice)\n          return getFarmApr(\n            new BigNumber(farm.poolWeight),\n            dibPrice,\n            totalLiquidity,\n            farm.lpAddresses[CHAIN_ID],\n            dibPerSecond,\n          )\n        }\n        return null\n      })\n\n      const maxApr = max(aprs)\n      return maxApr?.toLocaleString('en-US', { maximumFractionDigits: 2 })\n    }\n    return null\n  }, [dibPrice, farmsLP, dibPerSecond])\n\n  const aprText = highestApr || '-'\n  const earnAprText = t('Earn up to %highestApr% APR in Pools', { highestApr: aprText })\n  const [earnUpTo, InFarms] = earnAprText.split(aprText)\n\n  return (\n    <StyledFarmStakingCard>\n      <NavLink exact activeClassName=\"active\" to=\"/pools\" id=\"farm-apr-cta\">\n        <CardBody>\n          <Heading color=\"contrast\" scale=\"lg\">\n            {earnUpTo}\n          </Heading>\n          <CardMidContent>\n            {highestApr && !isFetchingFarmData ? (\n              `${highestApr}%`\n            ) : (\n              <>\n                <Skeleton animation=\"pulse\" variant=\"rect\" height=\"44px\" />\n                <div ref={observerRef} />\n              </>\n            )}\n          </CardMidContent>\n          <Flex justifyContent=\"space-between\">\n            <Heading color=\"contrast\" scale=\"lg\">\n              {InFarms}\n            </Heading>\n            <ArrowForwardIcon mt={30} color=\"primary\" />\n          </Flex>\n        </CardBody>\n      </NavLink>\n    </StyledFarmStakingCard>\n  )\n}\n\nexport default EarnAPRCard\n","import React, { useCallback } from 'react'\nimport styled from 'styled-components'\nimport { BASE_SWAP_URL, BASE_URL } from 'config'\nimport { Heading, BaseLayout, LinkExternal, CardBody, Card, Flex, Button, MetamaskIcon } from 'uikit'\nimport { useTranslation } from 'contexts/Localization'\nimport Page from 'components/layout/Page'\nimport TutorialBanner from 'components/TutorialBanner'\nimport FarmStakingCard from 'views/Home/components/FarmStakingCard'\nimport DIBStats from 'views/Home/components/DIBStats'\nimport TotalValueLockedCard from 'views/Home/components/TotalValueLockedCard'\nimport EarnStadiumsAPRCard from 'views/Home/components/EarnStadiumsAPRCard'\nimport EarnGoalsAPRCard from 'views/Home/components/EarnGoalsAPRCard'\nimport CopyToClipboard from 'uikit/widgets/WalletModal/CopyToClipboard'\nimport { getDIBAddress, getWethAddress } from 'utils/addressHelpers'\nimport { getScanTokenUrl } from 'utils/scan'\n\nconst Cards = styled(BaseLayout)`\n  align-items: stretch;\n  justify-content: stretch;\n  margin-bottom: 24px;\n  grid-gap: 24px;\n\n  & > div {\n    grid-column: span 6;\n    width: 100%;\n  }\n\n  ${({ theme }) => theme.mediaQueries.sm} {\n    & > div {\n      grid-column: span 8;\n    }\n  }\n\n  ${({ theme }) => theme.mediaQueries.lg} {\n    margin-bottom: 32px;\n    grid-gap: 32px;\n\n    & > div {\n      grid-column: span 6;\n    }\n  }\n`\n\nconst token = getDIBAddress()\n\nconst TokenCard = () => {\n  const { t } = useTranslation()\n\n  const addWatchDIBToken = useCallback(async () => {\n    // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n    // @ts-ignore\n    const provider = window.ethereum\n    if (provider) {\n      try {\n        // wasAdded is a boolean. Like any RPC method, an error may be thrown.\n        await provider.request({\n          method: 'wallet_watchAsset',\n          params: {\n            type: 'ERC20',\n            options: {\n              address: token,\n              symbol: 'DIB',\n              decimals: '18',\n              image: `${BASE_URL}/images/tokens/dib.svg`,\n            },\n          },\n        })\n\n        // if (wasAdded) {\n        //   console.log('Token was added')\n        // }\n      } catch (error) {\n        // TODO: find a way to handle when the user rejects transaction or it fails\n      }\n    }\n  }, [])\n  return (\n    <Card>\n      <CardBody>\n        <Heading scale=\"xl\" mb=\"24px\">\n          {t('DIB Token info')}\n        </Heading>\n        <Flex alignItems=\"center\" mb=\"25px\">\n          <Button\n            mr=\"20px\"\n            as=\"a\"\n            target=\"_blank\"\n            href={`${BASE_SWAP_URL}?inputCurrency=${getWethAddress()}&outputCurrency=${getDIBAddress()}`}\n          >\n            Buy DIB and HODL\n          </Button>\n        </Flex>\n        <Flex alignItems=\"center\" mb=\"25px\">\n          <Button onClick={addWatchDIBToken} scale=\"md\">\n            Add DIB to <MetamaskIcon margin=\"0 5px\" />\n          </Button>\n        </Flex>\n        <Flex flexDirection=\"column\" mb=\"15px\">\n          <LinkExternal mb=\"20px\" small href={`${getScanTokenUrl(token)}`}>\n            {token}\n          </LinkExternal>\n          <CopyToClipboard toCopy={token}>Copy Address</CopyToClipboard>\n        </Flex>\n      </CardBody>\n    </Card>\n  )\n}\n\nconst Home: React.FC = () => {\n  return (\n    <Page>\n      <TutorialBanner />\n      <div>\n        <Cards>\n          <CardsColumn>\n            <TokenCard />\n            <FarmStakingCard />\n          </CardsColumn>\n          <CardsColumn>\n            <TotalValueLockedCard />\n            <EarnStadiumsAPRCard />\n            <EarnGoalsAPRCard />\n            <DIBStats />\n          </CardsColumn>\n        </Cards>\n      </div>\n    </Page>\n  )\n}\n\nexport default Home\n\nconst CardsColumn = styled.div`\n  & > div + div {\n    margin-top: 10px;\n  }\n`\n"],"sourceRoot":""}